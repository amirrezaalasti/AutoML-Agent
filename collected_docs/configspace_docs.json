[
  {
    "title": "Configuration - ConfigSpace",
    "content": "Configuration\nConfigSpace.configuration\n#\nConfiguration\n#\nConfiguration\n(\nconfiguration_space\n:\nConfigurationSpace\n,\nvalues\n:\nMapping\n[\nstr\n,\nAny\n]\n|\nNone\n=\nNone\n,\nvector\n:\nArray\n[\nf64\n]\n|\nNone\n=\nNone\n,\nallow_inactive_with_values\n:\nbool\n=\nFalse\n,\norigin\n:\nAny\n|\nNone\n=\nNone\n,\nconfig_id\n:\nint\n|\nNone\n=\nNone\n,\n)\nBases:\nMapping\n[\nstr\n,\nAny\n]\nClass for a single configuration.\nThe\nConfiguration\nobject\nholds for all active hyperparameters a value. While the\nConfigurationSpace\nstores the definitions for the hyperparameters (value ranges, constraints,...),\na\nConfiguration\nobject is\nmore an instance of it. Parameters of a\nConfiguration\nobject can be\naccessed and modified similar to python dictionaries\n(c.f.\nuser guilde\n).\nPARAMETER\nDESCRIPTION\nconfiguration_space\nThe space this configuration is in\nTYPE:\nConfigurationSpace\nvalues\nA dictionary with pairs (hyperparameter_name, value), where value is\na legal value of the hyperparameter in the above configuration_space\nTYPE:\nMapping\n[\nstr\n,\nAny\n] | None\nDEFAULT:\nNone\nvector\nA numpy array for efficient representation. Either values or vector\nhas to be given\nTYPE:\nArray\n[\nf64\n] | None\nDEFAULT:\nNone\nallow_inactive_with_values\nWhether an Exception will be raised if a value for an inactive\nhyperparameter is given. Default is to raise an Exception.\nDefault to False\nTYPE:\nbool\nDEFAULT:\nFalse\norigin\nStore information about the origin of this configuration.\nDefaults to None.\nTYPE:\nAny\n| None\nDEFAULT:\nNone\nconfig_id\nInteger configuration ID which can be used by a program using the\nConfigSpace package.\nTYPE:\nint\n| None\nDEFAULT:\nNone\nSource code in\nsrc/ConfigSpace/configuration.py\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\ndef\n__init__\n(\nself\n,\nconfiguration_space\n:\nConfigurationSpace\n,\nvalues\n:\nMapping\n[\nstr\n,\nAny\n]\n|\nNone\n=\nNone\n,\nvector\n:\nArray\n[\nf64\n]\n|\nNone\n=\nNone\n,\nallow_inactive_with_values\n:\nbool\n=\nFalse\n,\norigin\n:\nAny\n|\nNone\n=\nNone\n,\nconfig_id\n:\nint\n|\nNone\n=\nNone\n,\n)\n->\nNone\n:\n\"\"\"Create a new configuration.\nArgs:\nconfiguration_space:\nThe space this configuration is in\nvalues:\nA dictionary with pairs (hyperparameter_name, value), where value is\na legal value of the hyperparameter in the above configuration_space\nvector:\nA numpy array for efficient representation. Either values or vector\nhas to be given\nallow_inactive_with_values:\nWhether an Exception will be raised if a value for an inactive\nhyperparameter is given. Default is to raise an Exception.\nDefault to False\norigin:\nStore information about the origin of this configuration.\nDefaults to None.\nconfig_id:\nInteger configuration ID which can be used by a program using the\nConfigSpace package.\n\"\"\"\nif\n(\nvalues\nis\nnot\nNone\nand\nvector\nis\nnot\nNone\nor\nvalues\nis\nNone\nand\nvector\nis\nNone\n):\nraise\nValueError\n(\n\"Specify Configuration as either a dictionary or a vector.\"\n,\n)\nself\n.\nconfig_space\n=\nconfiguration_space\nself\n.\nallow_inactive_with_values\n=\nallow_inactive_with_values\nself\n.\norigin\n=\norigin\nself\n.\nconfig_id\n=\nconfig_id\n# This is cached. When it's None, it means it needs to be relaoaded\n# which is primarly handled in __getitem__.\nself\n.\n_values\n:\ndict\n[\nstr\n,\nAny\n]\n|\nNone\n=\nNone\n# Will be set below\nself\n.\n_vector\n:\nnp\n.\nndarray\nif\nvalues\nis\nnot\nNone\n:\nunknown_keys\n=\nvalues\n.\nkeys\n()\n-\nself\n.\nconfig_space\n.\nkeys\n()\nif\nany\n(\nunknown_keys\n):\nraise\nValueError\n(\nf\n\"Unknown hyperparameter(s)\n{\nunknown_keys\n}\n\"\n)\n# Using cs._hyperparameters to iterate makes sure that the hyperparameters\n# in the configuration are sorted in the same way as they are sorted in\n# the configuration space\nself\n.\n_values\n=\n{}\nself\n.\n_vector\n=\nnp\n.\nempty\n(\nshape\n=\nlen\n(\nconfiguration_space\n),\ndtype\n=\nf64\n)\nfor\nkey\n,\nhp\nin\nconfiguration_space\n.\nitems\n():\ni\n=\nconfiguration_space\n.\nindex_of\n[\nkey\n]\nvalue\n=\nvalues\n.\nget\n(\nkey\n,\nNotSet\n)\nif\nvalue\nis\nNotSet\n:\nself\n.\n_vector\n[\ni\n]\n=\nnp\n.\nnan\ncontinue\nif\nnot\nhp\n.\nlegal_value\n(\nvalue\n):\nraise\nIllegalValueError\n(\nhp\n,\nvalue\n)\n# Truncate the float to be of constant lengt\nif\nisinstance\n(\nhp\n,\nFloatHyperparameter\n):\nvalue\n=\nfloat\n(\nnp\n.\nround\n(\nvalue\n,\nROUND_PLACES\n))\n# type: ignore\nself\n.\n_values\n[\nkey\n]\n=\nvalue\nself\n.\n_vector\n[\ni\n]\n=\nhp\n.\nto_vector\n(\nvalue\n)\n# type: ignore\nself\n.\ncheck_valid_configuration\n()\nelif\nvector\nis\nnot\nNone\n:\nif\nnot\nisinstance\n(\nvector\n,\nnp\n.\nndarray\n):\n_vector\n=\nnp\n.\nasarray\n(\nvector\n,\ndtype\n=\nf64\n)\nelse\n:\n_vector\n=\nvector\nif\n_vector\n.\nndim\n!=\n1\n:\n# If we have a 2d array with shape (n, 1), flatten it\nif\nlen\n(\n_vector\n.\nshape\n)\n==\n2\nand\n_vector\n.\nshape\n[\n1\n]\n==\n1\n:\n_vector\n=\n_vector\n.\nflatten\n()\nelse\n:\nraise\nValueError\n(\n\"Only 1d arrays can be converted to a Configuration, \"\nf\n\"you passed an array of shape\n{\n_vector\n.\nshape\n}\n\"\n,\n)\nn_hyperparameters\n=\nlen\n(\nself\n.\nconfig_space\n)\nif\nlen\n(\n_vector\n)\n!=\nn_hyperparameters\n:\nraise\nValueError\n(\nf\n\"Expected array of length\n{\nn_hyperparameters\n}\n, got\n{\nlen\n(\n_vector\n)\n}\n\"\n,\n)\nself\n.\n_vector\n=\n_vector\nconfig_id\ninstance-attribute\n#\nconfig_id\n:\nint\n|\nNone\n=\nconfig_id\nThe configuration id of the Configuration, sometimes used by tools working with\nConfigSpace.\nconfig_space\ninstance-attribute\n#\nconfig_space\n:\nConfigurationSpace\n=\nconfiguration_space\nThe space this configuration is in.\norigin\ninstance-attribute\n#\norigin\n:\nAny\n|\nNone\n=\norigin\nThe origin of the Configuration, sometimes used by tools working with\nConfigSpace.\ncheck_valid_configuration\n#\ncheck_valid_configuration\n()\n->\nNone\nCheck if the object is a valid.\nRAISES\nDESCRIPTION\nValueError\nIf configuration is not valid.\nSource code in\nsrc/ConfigSpace/configuration.py\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\ndef\ncheck_valid_configuration\n(\nself\n)\n->\nNone\n:\n\"\"\"Check if the object is a valid.\nRaises:\nValueError: If configuration is not valid.\n\"\"\"\nfrom\nConfigSpace.util\nimport\ncheck_configuration\ncheck_configuration\n(\nself\n.\nconfig_space\n,\nself\n.\n_vector\n,\nallow_inactive_with_values\n=\nself\n.\nallow_inactive_with_values\n,\n)\nget_array\n#\nget_array\n()\n->\nArray\n[\nf64\n]\nThe internal vector representation of this config.\nAll continuous values are scaled between zero and one.\nRETURNS\nDESCRIPTION\nArray\n[\nf64\n]\nThe vector representation of the configuration\nSource code in\nsrc/ConfigSpace/configuration.py\n166\n167\n168\n169\n170\n171\n172\n173\n174\ndef\nget_array\n(\nself\n)\n->\nArray\n[\nf64\n]:\n\"\"\"The internal vector representation of this config.\nAll continuous values are scaled between zero and one.\nReturns:\nThe vector representation of the configuration\n\"\"\"\nreturn\nself\n.\n_vector\nget_dictionary\n#\nget_dictionary\n()\n->\ndict\n[\nstr\n,\nAny\n]\nA representation of the\nConfiguration\nin dictionary form.\nDeprecated\nPlease use\ndict(config)\ninstead of\nconfig.get_dictionary()\nor use it as a dictionary directly if needed.,\nRETURNS\nDESCRIPTION\ndict\n[\nstr\n,\nAny\n]\nConfiguration as dictionary\nSource code in\nsrc/ConfigSpace/configuration.py\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n@deprecated\n(\n\"Please use `dict(config)` instead of `config.get_dictionary()`\"\n\" or use it as a dictionary directly if needed.\"\n,\n)\ndef\nget_dictionary\n(\nself\n)\n->\ndict\n[\nstr\n,\nAny\n]:\n\"\"\"A representation of the `Configuration` in dictionary form.\n!!! warning \"Deprecated\"\nPlease use `dict(config)` instead of `config.get_dictionary()`\nor use it as a dictionary directly if needed.,\nReturns:\nConfiguration as dictionary\n\"\"\"\nreturn\ndict\n(\nself\n)",
    "url": "https://automl.github.io/ConfigSpace/latest/api/ConfigSpace/configuration/"
  },
  {
    "title": "Guide - ConfigSpace",
    "content": "Guide\nUser Guide\n#\nIn this user guide, the concepts of using different hyperparameters,\napplying conditions and forbidden clauses to a configuration space are explained.\nThese concepts will be introduced by defining a more complex configuration space\nfor a support vector machine.\n1st Example: Integer hyperparameters and float hyperparameters\n#\nAssume that we want to use a support vector machine (=SVM) for classification\ntasks and therefore, we want to optimize its hyperparameters:\nC\n: regularization constant  with\nC\nbeing a float value.\nmax_iter\n: the maximum number of iterations within the solver with\nmax_iter\nbeing a positive integer.\nThe implementation of the classifier is out of scope and thus not shown.\nBut for further reading about support vector machines and the meaning of its hyperparameter,\nyou can continue reading\nhere\nor\nin the\nscikit-learn documentation\n.\nThe first step is always to create a\nConfigurationSpace\nwith the\nhyperparameters\nC\nand\nmax_iter\n.\nTo restrict the search space, we choose\nC\nto be a\nFloat\nbetween -1 and 1.\nFurthermore, we choose\nmax_iter\nto be an\nInteger\n.\nfrom\nConfigSpace\nimport\nConfigurationSpace\ncs\n=\nConfigurationSpace\n(\nspace\n=\n{\n\"C\"\n:\n(\n-\n1.0\n,\n1.0\n),\n# Note the decimal to make it a float\n\"max_iter\"\n:\n(\n10\n,\n100\n),\n},\nseed\n=\n1234\n,\n)\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\nC\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n-\n1.0\n,\n1.0\n],\nDefault\n:\n0.0\nmax_iter\n,\nType\n:\nUniformInteger\n,\nRange\n:\n[\n10\n,\n100\n],\nDefault\n:\n55\nNow, the\nConfigurationSpace\nobject\ncs\ncontains definitions of the hyperparameters\nC\nand\nmax_iter\nwith their\nvalue-ranges.\nFor demonstration purpose, we sample a configuration from it.\nconfig\n=\ncs\n.\nsample_configuration\n()\nprint\n(\nconfig\n)\nConfiguration\n(\nvalues\n=\n{\n'C'\n:\n-\n0.6169610992422\n,\n'max_iter'\n:\n33\n,\n})\nSampled instances from a\nConfigurationSpace\nare called a\nConfiguration\n.\nIn a\nConfiguration\n,\na parameter can be accessed or modified similar to a python dictionary.\nfor\nkey\n,\nvalue\nin\nconfig\n.\nitems\n():\nprint\n(\nf\n\"\n{\nkey\n}\n:\n{\nvalue\n}\n\"\n)\nprint\n(\nconfig\n[\n\"C\"\n])\nC\n:\n-\n0.6169610992422\nmax_iter\n:\n33\n-\n0.6169610992422\n2nd Example: Categorical hyperparameters and conditions\n#\nThe scikit-learn SVM supports different kernels, such as an RBF, a sigmoid,\na linear or a polynomial kernel. We want to include them in the configuration space.\nSince this new hyperparameter has a finite number of values, we use a\n[\nCategorical\n][\nConfigSpace.api.types.categorical.Categorical\n].\nkernel_type\nin\n[\n'linear'\n,\n'poly'\n,\n'rbf'\n,\n'sigmoid'\n]\n.\nTaking a look at the SVM documentation, we observe that if the kernel type is\nchosen to be\n'poly'\n, another hyperparameter\ndegree\nmust be specified.\nAlso, for the kernel types\n'poly'\nand\n'sigmoid'\n, there is an additional hyperparameter\ncoef0\n.\nAs well as the hyperparameter\ngamma\nfor the kernel types\n'rbf'\n,\n'poly'\nand\n'sigmoid'\n.\ndegree\n: the integer degree of a polynomial kernel function.\ncoef0\n: Independent term in kernel function. It is only needed for\n'poly'\nand\n'sigmoid'\nkernel.\ngamma\n: Kernel coefficient for\n'rbf'\n,\n'poly'\nand\n'sigmoid'\n.\nTo realize the different hyperparameter for the kernels, we use\nConditionals\n.\nPlease refer to their\nreference page\nfor more.\nEven in simple examples, the configuration space grows easily very fast and\nwith it the number of possible configurations.\nIt makes sense to limit the search space for hyperparameter optimizations in\norder to quickly find good configurations. For conditional hyperparameters\n(hyperparameters which only take a value if some condition is met)\n, ConfigSpace\nachieves this by sampling those hyperparameters from the configuration\nspace only if their condition is met.\nTo add conditions on hyperparameters to the configuration space, we first have\nto insert the new hyperparameters in the\nConfigSpace\nand in a second step, the\nconditions on them.\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nCategorical\n,\nFloat\n,\nInteger\nkernel_type\n=\nCategorical\n(\n'kernel_type'\n,\n[\n'linear'\n,\n'poly'\n,\n'rbf'\n,\n'sigmoid'\n])\ndegree\n=\nInteger\n(\n'degree'\n,\nbounds\n=\n(\n2\n,\n4\n),\ndefault\n=\n2\n)\ncoef0\n=\nFloat\n(\n'coef0'\n,\nbounds\n=\n(\n0\n,\n1\n),\ndefault\n=\n0.0\n)\ngamma\n=\nFloat\n(\n'gamma'\n,\nbounds\n=\n(\n1e-5\n,\n1e2\n),\ndefault\n=\n1\n,\nlog\n=\nTrue\n)\ncs\n=\nConfigurationSpace\n()\ncs\n.\nadd\n([\nkernel_type\n,\ndegree\n,\ncoef0\n,\ngamma\n])\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\ncoef0\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n0.0\n,\n1.0\n],\nDefault\n:\n0.0\ndegree\n,\nType\n:\nUniformInteger\n,\nRange\n:\n[\n2\n,\n4\n],\nDefault\n:\n2\ngamma\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n1e-05\n,\n100.0\n],\nDefault\n:\n1.0\n,\non\nlog\n-\nscale\nkernel_type\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nlinear\n,\npoly\n,\nrbf\n,\nsigmoid\n},\nDefault\n:\nlinear\nFirst, we define the conditions. Conditions work by constraining a child\nhyperparameter (the first argument) on its parent hyperparameter (the second argument)\nbeing in a certain relation to a value (the third argument).\nEqualsCondition(degree, kernel_type, 'poly')\nexpresses that\ndegree\nis\nconstrained on\nkernel_type\nbeing equal to the value\n'poly'\n.\nTo express constraints involving multiple parameters or values, we can use conjunctions.\nIn the following example,\ncond_2\ndescribes that\ncoef0\nis a valid hyperparameter, if the\nkernel_type\nhas either the value\n'poly'\nor\n'sigmoid'\n.\nfrom\nConfigSpace\nimport\nEqualsCondition\n,\nInCondition\n,\nOrConjunction\n# read as: \"degree is active if kernel_type == 'poly'\"\ncond_1\n=\nEqualsCondition\n(\ndegree\n,\nkernel_type\n,\n'poly'\n)\n# read as: \"coef0 is active if (kernel_type == 'poly' or kernel_type == 'sigmoid')\"\n# You could also define this using an InCondition as shown below\ncond_2\n=\nOrConjunction\n(\nEqualsCondition\n(\ncoef0\n,\nkernel_type\n,\n'poly'\n),\nEqualsCondition\n(\ncoef0\n,\nkernel_type\n,\n'sigmoid'\n)\n)\n# read as: \"gamma is active if kernel_type in ['rbf', 'poly', 'sigmoid']\"\ncond_3\n=\nInCondition\n(\ngamma\n,\nkernel_type\n,\n[\n'rbf'\n,\n'poly'\n,\n'sigmoid'\n])\nFinally, we add the conditions to the configuration space\ncs\n.\nadd\n([\ncond_1\n,\ncond_2\n,\ncond_3\n])\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\ncoef0\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n0.0\n,\n1.0\n],\nDefault\n:\n0.0\ndegree\n,\nType\n:\nUniformInteger\n,\nRange\n:\n[\n2\n,\n4\n],\nDefault\n:\n2\ngamma\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n1e-05\n,\n100.0\n],\nDefault\n:\n1.0\n,\non\nlog\n-\nscale\nkernel_type\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nlinear\n,\npoly\n,\nrbf\n,\nsigmoid\n},\nDefault\n:\nlinear\nConditions\n:\n(\ncoef0\n|\nkernel_type\n==\n'poly'\n||\ncoef0\n|\nkernel_type\n==\n'sigmoid'\n)\ndegree\n|\nkernel_type\n==\n'poly'\ngamma\n|\nkernel_type\nin\n{\n'rbf'\n,\n'poly'\n,\n'sigmoid'\n}\nNote\nConfigSpace offers a lot of different condition types.\nPlease check out the\nconditions reference page\nfor more.\nWarning\nWe advise not  using the\nEqualsCondition\nor the\nInCondition\non float hyperparameters.\nDue to numerical rounding that can occur, it can be the case that these conditions evaluate to\nFalse\neven if they should evaluate to\nTrue\n.\n3rd Example: Forbidden clauses\n#\nIt may occur that some states in the configuration space are not allowed.\nConfigSpace supports this functionality by offering\nForbidden clauses\n.\nWe demonstrate the usage of Forbidden clauses by defining the configuration space for the\nlinear SVM\n.\nAgain, we use the sklearn implementation. This implementation has three\nhyperparameters to tune:\npenalty\n: Specifies the norm used in the penalization with values\n'l1'\nor\n'l2j'\n.\nloss\n: Specifies the loss function with values\n'hinge'\nor\n'squared_hinge'\n.\ndual\n: Solves the optimization problem either in the dual or simple form with values\nTrue\nor\nFalse\n.\nBecause some combinations of\npenalty\n,\nloss\nand\ndual\njust don't work\ntogether, we want to make sure that these combinations are not sampled from the\nconfiguration space.\nIt is possible to represent these as conditionals, however sometimes it is easier to\nexpress them as forbidden clauses.\nFirst, we add these three new hyperparameters to the configuration space.\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nCategorical\n,\nConstant\ncs\n=\nConfigurationSpace\n()\npenalty\n=\nCategorical\n(\n\"penalty\"\n,\n[\n\"l1\"\n,\n\"l2\"\n],\ndefault\n=\n\"l2\"\n)\nloss\n=\nCategorical\n(\n\"loss\"\n,\n[\n\"hinge\"\n,\n\"squared_hinge\"\n],\ndefault\n=\n\"squared_hinge\"\n)\ndual\n=\nConstant\n(\n\"dual\"\n,\n\"False\"\n)\ncs\n.\nadd\n([\npenalty\n,\nloss\n,\ndual\n])\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\ndual\n,\nType\n:\nConstant\n,\nValue\n:\nFalse\nloss\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nhinge\n,\nsquared_hinge\n},\nDefault\n:\nsquared_hinge\npenalty\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nl1\n,\nl2\n},\nDefault\n:\nl2\nNow, we want to forbid the following hyperparameter combinations:\npenalty\nis\n'l1'\nand\nloss\nis\n'hinge'\n.\ndual\nis False and\npenalty\nis\n'l2'\nand\nloss\nis\n'hinge'\ndual\nis False and\npenalty\nis\n'l1'\nfrom\nConfigSpace\nimport\nForbiddenEqualsClause\n,\nForbiddenAndConjunction\npenalty_and_loss\n=\nForbiddenAndConjunction\n(\nForbiddenEqualsClause\n(\npenalty\n,\n\"l1\"\n),\nForbiddenEqualsClause\n(\nloss\n,\n\"hinge\"\n)\n)\nconstant_penalty_and_loss\n=\nForbiddenAndConjunction\n(\nForbiddenEqualsClause\n(\ndual\n,\n\"False\"\n),\nForbiddenEqualsClause\n(\npenalty\n,\n\"l2\"\n),\nForbiddenEqualsClause\n(\nloss\n,\n\"hinge\"\n)\n)\npenalty_and_dual\n=\nForbiddenAndConjunction\n(\nForbiddenEqualsClause\n(\ndual\n,\n\"False\"\n),\nForbiddenEqualsClause\n(\npenalty\n,\n\"l1\"\n)\n)\nIn the last step, we add them to the configuration space object:\ncs\n.\nadd\n([\npenalty_and_loss\n,\nconstant_penalty_and_loss\n,\npenalty_and_dual\n])\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\ndual\n,\nType\n:\nConstant\n,\nValue\n:\nFalse\nloss\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nhinge\n,\nsquared_hinge\n},\nDefault\n:\nsquared_hinge\npenalty\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nl1\n,\nl2\n},\nDefault\n:\nl2\nForbidden\nClauses\n:\n(\nForbidden\n:\ndual\n==\n'False'\n&&\nForbidden\n:\npenalty\n==\n'l1'\n)\n(\nForbidden\n:\ndual\n==\n'False'\n&&\nForbidden\n:\npenalty\n==\n'l2'\n&&\nForbidden\n:\nloss\n==\n'hinge'\n)\n(\nForbidden\n:\npenalty\n==\n'l1'\n&&\nForbidden\n:\nloss\n==\n'hinge'\n)\n4th Example Serialization\n#\nTo serialize the\nConfigurationSpace\nobject, we can choose between different output formats, such as\nas plain-type dictionary, directly to\n.yaml\nor\n.json\nand if required for backwards compatiblity\npcs\n.\nPlese see the\nserialization reference page\nfor more.\nIn this example, we want to store the\nConfigurationSpace\nobject as a\n.yaml\nfile.\nfrom\npathlib\nimport\nPath\nfrom\nConfigSpace\nimport\nConfigurationSpace\npath\n=\nPath\n(\n\"configspace.yaml\"\n)\ncs\n=\nConfigurationSpace\n(\nspace\n=\n{\n\"C\"\n:\n(\n-\n1.0\n,\n1.0\n),\n# Note the decimal to make it a float\n\"max_iter\"\n:\n(\n10\n,\n100\n),\n},\nseed\n=\n1234\n,\n)\ncs\n.\nto_yaml\n(\npath\n)\nloaded_cs\n=\nConfigurationSpace\n.\nfrom_yaml\n(\npath\n)\nwith\npath\n.\nopen\n()\nas\nf\n:\nprint\n(\nf\n.\nread\n())\nconditions\n:\n[]\nforbiddens\n:\n[]\nformat_version\n:\n0.4\nhyperparameters\n:\n-\ndefault_value\n:\n0.0\nlog\n:\nfalse\nlower\n:\n-1.0\nmeta\n:\nnull\nname\n:\nC\ntype\n:\nuniform_float\nupper\n:\n1.0\n-\ndefault_value\n:\n55\nlog\n:\nfalse\nlower\n:\n10\nmeta\n:\nnull\nname\n:\nmax_iter\ntype\n:\nuniform_int\nupper\n:\n100\nname\n:\nnull\npython_module_version\n:\n1.2.0\nIf you require custom encoding or decoding or parameters, please refer to the\nserialization reference page\nfor more.\n5th Example: Placing priors on the hyperparameters\n#\nIf you want to conduct black-box optimization in\nSMAC\n,\nand you have prior knowledge about the which regions of the search space are more likely to contain the optimum,\nyou may include this knowledge when designing the configuration space.\nMore specifically, you place prior distributions over the optimum on the parameters,\neither by a (log)-normal or (log)-Beta distribution.\nSMAC then considers the given priors through the optimization by using\nPiBO\n.\nConsider the case of optimizing the accuracy of an MLP with three hyperparameters:\nlearning rate in\n(1e-5, 1e-1)\ndropout in\n(0, 0.99)\nactivation in\n[\"Tanh\", \"ReLU\"]\n.\nFrom prior experience, you believe the optimal learning rate to be around\n1e-3\n,\na good dropout to be around\n0.25\n,\nand the optimal activation function to be ReLU about 80% of the time.\nThis can be represented accordingly:\nimport\nnumpy\nas\nnp\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nFloat\n,\nCategorical\n,\nBeta\n,\nNormal\ncs\n=\nConfigurationSpace\n(\nspace\n=\n{\n\"lr\"\n:\nFloat\n(\n'lr'\n,\nbounds\n=\n(\n1e-5\n,\n1e-1\n),\ndefault\n=\n1e-3\n,\nlog\n=\nTrue\n,\ndistribution\n=\nNormal\n(\n1e-3\n,\n1e-1\n)\n),\n\"dropout\"\n:\nFloat\n(\n'dropout'\n,\nbounds\n=\n(\n0\n,\n0.99\n),\ndefault\n=\n0.25\n,\ndistribution\n=\nBeta\n(\nalpha\n=\n2\n,\nbeta\n=\n4\n)\n),\n\"activation\"\n:\nCategorical\n(\n'activation'\n,\nitems\n=\n[\n'tanh'\n,\n'relu'\n],\nweights\n=\n[\n0.2\n,\n0.8\n]\n),\n},\nseed\n=\n1234\n,\n)\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\nactivation\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\ntanh\n,\nrelu\n},\nDefault\n:\nrelu\n,\nProbabilities\n:\n[\n0.2\n0.8\n]\ndropout\n,\nType\n:\nBetaFloat\n,\nAlpha\n:\n2.0\n,\nBeta\n:\n4.0\n,\nRange\n:\n[\n0.0\n,\n0.99\n],\nDefault\n:\n0.25\nlr\n,\nType\n:\nNormalFloat\n,\nMu\n:\n0.001\n,\nSigma\n:\n0.1\n,\nRange\n:\n[\n1e-05\n,\n0.1\n],\nDefault\n:\n0.001\n,\non\nlog\n-\nscale\nTo check that your prior makes sense for each hyperparameter,\nyou can easily do so with the\npdf_values()\nmethod.\nThere, you will see that the probability of the optimal learning rate peaks at\n10^-3, and decays as we go further away from it:\ntest_points\n=\nnp\n.\nlogspace\n(\n-\n5\n,\n-\n1\n,\n5\n)\nprint\n(\ntest_points\n)\nprint\n(\ncs\n[\n'lr'\n]\n.\npdf_values\n(\ntest_points\n))\n[\n1.e-05\n1.e-04\n1.e-03\n1.e-02\n1.e-01\n]\n[\n0.226227\n1.01401116\n1.67189438\n1.01401116\n0.226227\n]",
    "url": "https://automl.github.io/ConfigSpace/latest/guide/"
  },
  {
    "title": "Quickstart - ConfigSpace",
    "content": "Quickstart\nQuickstart\n#\nA\nConfigurationSpace\nis a data structure to describe the configuration space of an algorithm to tune.\nPossible hyperparameter types are numerical, categorical, conditional and ordinal hyperparameters.\nAutoML tools, such as\nSMAC3\nand\nBOHB\nare using the configuration space\nmodule to sample hyperparameter configurations.\nAlso,\nauto-sklearn\n, an automated machine learning toolkit, which frees the\nmachine learning user from algorithm selection and hyperparameter tuning,\nmakes heavy use of the ConfigSpace package.\nThis simple quickstart tutorial will show you, how to set up your own\nConfigurationSpace\n, and will demonstrate\nwhat you can realize with it. This\nBasic Usage\nwill include the following:\nCreate a\nConfigurationSpace\nDefine a simple\nhyperparameter\nwith a float value\nThe\nAdvanced Usage\nwill cover:\nCreating two sets of possible model configs, using\nConditions\n.\nUse a different distirbution for one of the hyperparameters.\nCreate two subspaces from these and add them to a parent\nConfigurationSpace\nTurn these configs into actual models!\nThese will not show the following and you should refer to the\nuser guide\nfor more:\nAdd\nForbidden clauses\nAdd\nConditions\nSerialize\nBasic Usage\n#\nWe take a look at a simple\nridge regression\n,\nwhich has only one floating hyperparameter\nalpha\n.\nThe first step is always to create a\nConfigurationSpace\nobject. All the\nhyperparameters and constraints will be added to this object.\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nFloat\ncs\n=\nConfigurationSpace\n(\nspace\n=\n{\n\"alpha\"\n:\n(\n0.0\n,\n1.0\n)},\nseed\n=\n1234\n)\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\nalpha\n,\nType\n:\nUniformFloat\n,\nRange\n:\n[\n0.0\n,\n1.0\n],\nDefault\n:\n0.5\nThe hyperparameter\nalpha\nis chosen to have floating point values from\n0\nto\n1\n.\nFor demonstration purpose, we sample a configuration from the\nConfigurationSpace\nobject.\nconfig\n=\ncs\n.\nsample_configuration\n()\nprint\n(\nconfig\n)\nConfiguration\n(\nvalues\n=\n{\n'alpha'\n:\n0.1915194503789\n,\n})\nYou can use this configuration just like you would a regular old python dictionary!\nfor\nkey\n,\nvalue\nin\nconfig\n.\nitems\n():\nprint\n(\nkey\n,\nvalue\n)\nalpha\n0.1915194503789\nAnd that's it!\nAdvanced Usage\n#\nLets create a more complex example where we have two models, model\nA\nand model\nB\n.\nModel\nB\nis some kernel based algorithm and\nA\njust needs a simple float hyperparamter.\nWe're going to create a config space that will let us correctly build a randomly selected model.\nfrom\ntyping\nimport\nLiteral\nfrom\ndataclasses\nimport\ndataclass\n@dataclass\nclass\nModelA\n:\nalpha\n:\nfloat\n\"\"\"Some value between 0 and 1\"\"\"\n@dataclass\nclass\nModelB\n:\nkernel\n:\nLiteral\n[\n\"rbf\"\n,\n\"flooper\"\n]\n\"\"\"Kernel type.\"\"\"\nkernel_floops\n:\nint\n|\nNone\n=\nNone\n\"\"\"Number of floops for the flooper kernel, only used if kernel == \"flooper\".\"\"\"\nFirst, lets start with building the two individual subspaces where for\nA\n, we want to sample alpha from a normal distribution and for\nB\nwe have the conditioned parameter and we slightly weight one kernel over another.\nfrom\ntyping\nimport\nLiteral\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nCategorical\n,\nInteger\n,\nFloat\n,\nNormal\n,\nEqualsCondition\n@dataclass\nclass\nModelA\n:\nalpha\n:\nfloat\n\"\"\"Some value between 0 and 1\"\"\"\n@staticmethod\ndef\nspace\n()\n->\nConfigurationSpace\n:\nreturn\nConfigurationSpace\n({\n\"alpha\"\n:\nFloat\n(\n\"alpha\"\n,\nbounds\n=\n(\n0\n,\n1\n),\ndistribution\n=\nNormal\n(\nmu\n=\n0.5\n,\nsigma\n=\n0.2\n))\n})\n@dataclass\nclass\nModelB\n:\nkernel\n:\nLiteral\n[\n\"rbf\"\n,\n\"flooper\"\n]\n\"\"\"Kernel type.\"\"\"\nkernel_floops\n:\nint\n|\nNone\n=\nNone\n\"\"\"Number of floops for the flooper kernel, only used if kernel == \"flooper\".\"\"\"\n@staticmethod\ndef\nspace\n()\n->\nConfigurationSpace\n:\ncs\n=\nConfigurationSpace\n(\n{\n\"kernel\"\n:\nCategorical\n(\n\"kernel\"\n,\n[\n\"rbf\"\n,\n\"flooper\"\n],\ndefault\n=\n\"rbf\"\n,\nweights\n=\n[\n.75\n,\n.25\n]),\n\"kernel_floops\"\n:\nInteger\n(\n\"kernel_floops\"\n,\nbounds\n=\n(\n1\n,\n10\n)),\n}\n)\n# We have to make sure \"kernel_floops\" is only active when the kernel is \"floops\"\ncs\n.\nadd\n(\nEqualsCondition\n(\ncs\n[\n\"kernel_floops\"\n],\ncs\n[\n\"kernel\"\n],\n\"flooper\"\n))\nreturn\ncs\nFinally, we need add these two a parent space where we condition each subspace to only be active depending on a\nparent\n.\nWe'll have the default configuration be\nA\nbut we put more emphasis when sampling on\nB\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nCategorical\ncs\n=\nConfigurationSpace\n(\nseed\n=\n123456\n,\nspace\n=\n{\n\"model\"\n:\nCategorical\n(\n\"model\"\n,\n[\n\"A\"\n,\n\"B\"\n],\ndefault\n=\n\"A\"\n,\nweights\n=\n[\n1\n,\n2\n]),\n}\n)\n# We set the prefix and delimiter to be empty string \"\" so that we don't have to do\n# any extra parsing once sampling\ncs\n.\nadd_configuration_space\n(\nprefix\n=\n\"\"\n,\ndelimiter\n=\n\"\"\n,\nconfiguration_space\n=\nModelA\n.\nspace\n(),\nparent_hyperparameter\n=\n{\n\"parent\"\n:\ncs\n[\n\"model\"\n],\n\"value\"\n:\n\"A\"\n},\n)\ncs\n.\nadd_configuration_space\n(\nprefix\n=\n\"\"\n,\ndelimiter\n=\n\"\"\n,\nconfiguration_space\n=\nModelB\n.\nspace\n(),\nparent_hyperparameter\n=\n{\n\"parent\"\n:\ncs\n[\n\"model\"\n],\n\"value\"\n:\n\"B\"\n}\n)\nprint\n(\ncs\n)\nConfiguration\nspace\nobject\n:\nHyperparameters\n:\nalpha\n,\nType\n:\nNormalFloat\n,\nMu\n:\n0.5\n,\nSigma\n:\n0.2\n,\nRange\n:\n[\n0.0\n,\n1.0\n],\nDefault\n:\n0.5\nkernel\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nrbf\n,\nflooper\n},\nDefault\n:\nrbf\n,\nProbabilities\n:\n[\n0.75\n0.25\n]\nkernel_floops\n,\nType\n:\nUniformInteger\n,\nRange\n:\n[\n1\n,\n10\n],\nDefault\n:\n6\nmodel\n,\nType\n:\nCategorical\n,\nChoices\n:\n{\nA\n,\nB\n},\nDefault\n:\nA\n,\nProbabilities\n:\n[\n0.33333333\n0.66666667\n]\nConditions\n:\nalpha\n|\nmodel\n==\n'A'\nkernel\n|\nmodel\n==\n'B'\nkernel_floops\n|\nkernel\n==\n'flooper'\nAnd that's it!\nHowever for completness, lets examine how this works by first sampling from our config space.\nconfigs\n=\ncs\n.\nsample_configuration\n(\n4\n)\nprint\n(\nconfigs\n)\n[\nConfiguration\n(\nvalues\n=\n{\n'model'\n:\nnp\n.\nstr_\n(\n'A'\n),\n'alpha'\n:\n0.4165543657281\n,\n}),\nConfiguration\n(\nvalues\n=\n{\n'model'\n:\nnp\n.\nstr_\n(\n'B'\n),\n'kernel'\n:\nnp\n.\nstr_\n(\n'rbf'\n),\n}),\nConfiguration\n(\nvalues\n=\n{\n'model'\n:\nnp\n.\nstr_\n(\n'A'\n),\n'alpha'\n:\n0.6956537933613\n,\n}),\nConfiguration\n(\nvalues\n=\n{\n'model'\n:\nnp\n.\nstr_\n(\n'B'\n),\n'kernel'\n:\nnp\n.\nstr_\n(\n'flooper'\n),\n'kernel_floops'\n:\n5\n,\n})]\nWe can see the three different kinds of models we have, our basic\nA\nmodel as well as our\nB\nmodel\nwith the two kernels.\nNext, we do some processing of these configs to generate valid params to pass to these models\nmodels\n=\n[]\nfor\nconfig\nin\nconfigs\n:\nconfig_as_dict\n=\ndict\n(\nconfig\n)\nmodel_type\n=\nconfig_as_dict\n.\npop\n(\n\"model\"\n)\nmodel\n=\nModelA\n(\n**\nconfig_as_dict\n)\nif\nmodel_type\n==\n\"A\"\nelse\nModelB\n(\n**\nconfig_as_dict\n)\nmodels\n.\nappend\n(\nmodel\n)\nprint\n(\nmodels\n)\n[\nModelA\n(\nalpha\n=\n0.4165543657281\n),\nModelB\n(\nkernel\n=\nnp\n.\nstr_\n(\n'rbf'\n),\nkernel_floops\n=\nNone\n),\nModelA\n(\nalpha\n=\n0.6956537933613\n),\nModelB\n(\nkernel\n=\nnp\n.\nstr_\n(\n'flooper'\n),\nkernel_floops\n=\n5\n)]\nTo continue reading, visit the\nuser guide\nsection. There are\nmore information about hyperparameters, as well as an introduction to the\npowerful concepts of\nConditions\nand\nForbidden clauses\n.",
    "url": "https://automl.github.io/ConfigSpace/latest/quickstart/"
  },
  {
    "title": "Configuration space - ConfigSpace",
    "content": "Configuration space\nConfigSpace.configuration_space\n#\nConfigurationSpace\n#\nConfigurationSpace\n(\nname\n:\nstr\n|\nMapping\n[\nstr\n,\nAny\n]\n|\nNone\n=\nNone\n,\nseed\n:\nint\n|\nNone\n=\nNone\n,\nmeta\n:\ndict\n|\nNone\n=\nNone\n,\n*\n,\nspace\n:\n(\nNone\n|\nMapping\n[\nstr\n,\ntuple\n[\nint\n,\nint\n]\n|\ntuple\n[\nfloat\n,\nfloat\n]\n|\nSequence\n[\nAny\n]\n|\nint\n|\nfloat\n|\nstr\n|\nHyperparameter\n,\n]\n|\nSequence\n[\nHyperparameter\n]\n)\n=\nNone\n)\nBases:\nMapping\n[\nstr\n,\nHyperparameter\n]\nA collection-like object containing a set of hyperparameter definitions and\nconditions.\nA configuration space organizes all hyperparameters and its conditions\nas well as its forbidden clauses. Configurations can be sampled from\nthis configuration space. As underlying data structure, the\nconfiguration space uses a tree-based approach to represent the\nconditions and restrictions between hyperparameters.\nPARAMETER\nDESCRIPTION\nname\nName of the configuration space. If a dict is passed,\nthis is considered the same as the\nspace=\narg.\nTYPE:\nstr\n|\nMapping\n[\nstr\n,\nAny\n] | None\nDEFAULT:\nNone\nseed\nRandom seed\nTYPE:\nint\n| None\nDEFAULT:\nNone\nmeta\nField for holding meta data provided by the user.\nNot used by the configuration space.\nTYPE:\ndict\n| None\nDEFAULT:\nNone\nspace\nA simple configuration space to use:\nfrom\nConfigSpace\nimport\nConfigurationSpace\nConfigurationSpace\n(\nname\n=\n\"myspace\"\n,\nspace\n=\n{\n\"uniform_integer\"\n:\n(\n1\n,\n10\n),\n\"uniform_float\"\n:\n(\n1.0\n,\n10.0\n),\n\"categorical\"\n:\n[\n\"a\"\n,\n\"b\"\n,\n\"c\"\n],\n\"constant\"\n:\n1337\n,\n}\n)\nYou can also use a sequence of hyperparameters:\nfrom\nConfigSpace\nimport\nConfigurationSpace\n,\nFloat\n,\nInteger\nConfigurationSpace\n(\nname\n=\n\"myspace\"\n,\nspace\n=\n[\nFloat\n(\n\"a\"\n,\n(\n1.0\n,\n10.0\n)),\nInteger\n(\n\"b\"\n,\n(\n1\n,\n10\n))]\n)\nTYPE:\nNone |\nMapping\n[\nstr\n,\ntuple\n[\nint\n,\nint\n] |\ntuple\n[\nfloat\n,\nfloat\n] |\nSequence\n[\nAny\n] |\nint\n|\nfloat\n|\nstr\n|\nHyperparameter\n] |\nSequence\n[\nHyperparameter\n]\nDEFAULT:\nNone\nSource code in\nsrc/ConfigSpace/configuration_space.py\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\ndef\n__init__\n(\nself\n,\nname\n:\nstr\n|\nMapping\n[\nstr\n,\nAny\n]\n|\nNone\n=\nNone\n,\nseed\n:\nint\n|\nNone\n=\nNone\n,\nmeta\n:\ndict\n|\nNone\n=\nNone\n,\n*\n,\nspace\n:\nNone\n|\n(\nMapping\n[\nstr\n,\ntuple\n[\nint\n,\nint\n]\n|\ntuple\n[\nfloat\n,\nfloat\n]\n|\nSequence\n[\nAny\n]\n|\nint\n|\nfloat\n|\nstr\n|\nHyperparameter\n,\n]\n|\nSequence\n[\nHyperparameter\n]\n)\n=\nNone\n,\n)\n->\nNone\n:\n\"\"\"Initialize a configuration space.\nArgs:\nname:\nName of the configuration space. If a dict is passed,\nthis is considered the same as the `space=` arg.\nseed:\nRandom seed\nmeta:\nField for holding meta data provided by the user.\nNot used by the configuration space.\nspace:\nA simple configuration space to use:\n```python exec=\"true\" result=\"python\" source=\"material-block\"\nfrom ConfigSpace import ConfigurationSpace\nConfigurationSpace(\nname=\"myspace\",\nspace={\n\"uniform_integer\": (1, 10),\n\"uniform_float\": (1.0, 10.0),\n\"categorical\": [\"a\", \"b\", \"c\"],\n\"constant\": 1337,\n}\n)\n```\nYou can also use a sequence of hyperparameters:\n```python exec=\"true\" result=\"python\" source=\"material-block\"\nfrom ConfigSpace import ConfigurationSpace, Float, Integer\nConfigurationSpace(\nname=\"myspace\",\nspace=[Float(\"a\", (1.0, 10.0)), Integer(\"b\", (1, 10))]\n)\n```\n\"\"\"\n# If first arg is a dict, we assume this to be `space`\nif\nisinstance\n(\nname\n,\n(\nMapping\n,\nSequence\n))\nand\nnot\nisinstance\n(\nname\n,\nstr\n):\nspace\n=\nname\n_name\n=\nNone\nelse\n:\n_name\n=\nname\nself\n.\nname\n=\n_name\nself\n.\nmeta\n=\nmeta\nself\n.\nrandom\n=\nnp\n.\nrandom\n.\nRandomState\n(\nseed\n)\nself\n.\n_dag\n=\nDAG\n()\nself\n.\n_len\n=\n0\nif\nspace\nis\nnot\nNone\n:\nif\nisinstance\n(\nspace\n,\nMapping\n):\nhyperparameters\n=\nlist\n(\n_parse_hyperparameters_from_dict\n(\nspace\n))\nelif\nisinstance\n(\nspace\n,\nSequence\n):\nhyperparameters\n=\nlist\n(\nspace\n)\nself\n.\nadd\n(\nhyperparameters\n)\nat\nproperty\n#\nat\n:\nSequence\n[\nstr\n]\nThe hyperparameters by their index.\nchild_conditions_of\nproperty\n#\nchild_conditions_of\n:\nMapping\n[\nstr\n,\nSequence\n[\nConditionLike\n]]\nConditions of a hyperparameter.\nRETURNS\nDESCRIPTION\nMapping\n[\nstr\n,\nSequence\n[\nConditionLike\n]]\nMapping from a parent hyperparameter name to all conditions which\ncheck the value of the parent.\nchildren_of\nproperty\n#\nchildren_of\n:\nMapping\n[\nstr\n,\nSequence\n[\nHyperparameter\n]]\nChildren of a hyperparameter.\nRETURNS\nDESCRIPTION\nMapping\n[\nstr\n,\nSequence\n[\nHyperparameter\n]]\nMapping from a parent hyperparameter name to all hyperparameters which\nare activate, depending on the value of the parent.\nconditional_hyperparameters\nproperty\n#\nconditional_hyperparameters\n:\nSequence\n[\nstr\n]\nNames of all conditional hyperparameters.\nRETURNS\nDESCRIPTION\nSequence\n[\nstr\n]\nSet with all hyperparameter names which are only active under certain\nconditions\nconditions\nproperty\n#\nconditions\n:\nSequence\n[\nConditionLike\n]\nAll conditions from the configuration space.\nforbidden_clauses\nproperty\n#\nforbidden_clauses\n:\nSequence\n[\nForbiddenLike\n]\nAll forbidden clauses from the configuration space.\nindex_of\nproperty\n#\nindex_of\n:\nMapping\n[\nstr\n,\nint\n]\nThe index of hyperparameters by their name.\nparent_conditions_of\nproperty\n#\nparent_conditions_of\n:\nMapping\n[\nstr\n,\nSequence\n[\nConditionLike\n]]\nConditions of a hyperparameter.\nRETURNS\nDESCRIPTION\nMapping\n[\nstr\n,\nSequence\n[\nConditionLike\n]]\nMapping from a child hyperparameter name to all conditions which\nneed to be check to activate the child.\nparents_of\nproperty\n#\nparents_of\n:\nMapping\n[\nstr\n,\nSequence\n[\nHyperparameter\n]]\nParents of a hyperparameter.\nRETURNS\nDESCRIPTION\nMapping\n[\nstr\n,\nSequence\n[\nHyperparameter\n]]\nMapping from a child hyperparameter name to all hyperparameters which\nactivate the child, depending on their values.\nunconditional_hyperparameters\nproperty\n#\nunconditional_hyperparameters\n:\nSequence\n[\nstr\n]\nNames of all unconditional hyperparameters.\nRETURNS\nDESCRIPTION\nSequence\n[\nstr\n]\nSet of all hyperparameter names which are always active\n__eq__\n#\n__eq__\n(\nother\n:\nAny\n)\n->\nbool\nOverride the default Equals behavior.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\ndef\n__eq__\n(\nself\n,\nother\n:\nAny\n)\n->\nbool\n:\n\"\"\"Override the default Equals behavior.\"\"\"\nif\nisinstance\n(\nother\n,\nself\n.\n__class__\n):\nother_dict\n=\nother\n.\n__dict__\n# _minimum_condition_span has a np.ndarray which doesn't allow ==\n# to give a direct bool but is based off the others\nfor\nk\n,\nv\nin\nself\n.\n__dict__\n.\nitems\n():\nif\nk\nin\n(\n\"random\"\n,):\ncontinue\nif\nv\n!=\nother_dict\n.\nget\n(\nk\n):\nreturn\nFalse\nreturn\nTrue\nreturn\nNotImplemented\n__iter__\n#\n__iter__\n()\n->\nIterator\n[\nstr\n]\nIterate over the hyperparameter names in the right order.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n876\n877\n878\ndef\n__iter__\n(\nself\n)\n->\nIterator\n[\nstr\n]:\n\"\"\"Iterate over the hyperparameter names in the right order.\"\"\"\nreturn\niter\n(\nself\n.\n_dag\n.\nnodes\n.\nkeys\n())\n__len__\n#\n__len__\n()\n->\nint\nReturn the number of hyperparameters.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n884\n885\n886\ndef\n__len__\n(\nself\n)\n->\nint\n:\n\"\"\"Return the number of hyperparameters.\"\"\"\nreturn\nself\n.\n_len\nadd\n#\nadd\n(\n*\nargs\n:\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n|\nIterable\n[\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n],\n)\n->\nNone\nAdd a hyperparameter, condition or forbidden clause to the configuration\nspace.\nNote\nIf adding multiple hyperparameters, conditions or forbidden clauses, it\nis better to add them all at once with one call to\nadd()\n, as we\nrebuilt a cache after each call to\nadd()\n.\nPARAMETER\nDESCRIPTION\nargs\nHyperparameter, condition or forbidden clause to add\nTYPE:\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n|\nIterable\n[\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n]\nDEFAULT:\n()\nSource code in\nsrc/ConfigSpace/configuration_space.py\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\ndef\nadd\n(\nself\n,\n*\nargs\n:\n(\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n|\nIterable\n[\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n]\n),\n)\n->\nNone\n:\n\"\"\"Add a hyperparameter, condition or forbidden clause to the configuration\nspace.\n!!! note\nIf adding multiple hyperparameters, conditions or forbidden clauses, it\nis better to add them all at once with one call to `add()`, as we\nrebuilt a cache after each call to `add()`.\nArgs:\nargs:\nHyperparameter, condition or forbidden clause to add\n\"\"\"\n# First turn everything into one large iterable\nhps\n=\n[]\nconditions\n=\n[]\nforbiddens\n=\n[]\ndef\n_put_to_list\n(\narg\n:\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n|\nIterable\n[\nHyperparameter\n|\nConditionLike\n|\nForbiddenLike\n],\n)\n->\nNone\n:\nif\nisinstance\n(\narg\n,\nHyperparameter\n):\nhps\n.\nappend\n(\narg\n)\nelif\nisinstance\n(\narg\n,\n(\nCondition\n,\nConjunction\n)):\nconditions\n.\nappend\n(\narg\n)\nelif\nisinstance\n(\narg\n,\n(\nForbiddenClause\n,\nForbiddenConjunction\n,\nForbiddenRelation\n),\n):\nforbiddens\n.\nappend\n(\narg\n)\nelif\nisinstance\n(\narg\n,\nIterable\n):\nfor\na\nin\narg\n:\n_put_to_list\n(\na\n)\nelse\n:\nraise\nTypeError\n(\nf\n\"Unknown type\n{\ntype\n(\narg\n)\n}\n\"\n)\nfor\na\nin\nargs\n:\n_put_to_list\n(\na\n)\nwith\nself\n.\n_dag\n.\nupdate\n():\nfor\nhp\nin\nhps\n:\nself\n.\n_dag\n.\nadd\n(\nhp\n)\nfor\ncondition\nin\nconditions\n:\nself\n.\n_dag\n.\nadd_condition\n(\ncondition\n)\nfor\nforbidden\nin\nforbiddens\n:\nself\n.\n_dag\n.\nadd_forbidden\n(\nforbidden\n)\nself\n.\n_len\n=\nlen\n(\nself\n.\n_dag\n.\nnodes\n)\nself\n.\n_check_default_configuration\n()\nadd_condition\n#\nadd_condition\n(\ncondition\n:\nConditionLike\n)\n->\nConditionLike\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1288\n1289\n1290\n1291\n1292\n@deprecated\n(\n\"Please use `space.add(condition)`\"\n)\ndef\nadd_condition\n(\nself\n,\ncondition\n:\nConditionLike\n)\n->\nConditionLike\n:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nself\n.\nadd\n(\ncondition\n)\nreturn\ncondition\nadd_conditions\n#\nadd_conditions\n(\nconditions\n:\nlist\n[\nConditionLike\n],\n)\n->\nlist\n[\nConditionLike\n]\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1294\n1295\n1296\n1297\n1298\n@deprecated\n(\n\"Please use `space.add(conditions)`\"\n)\ndef\nadd_conditions\n(\nself\n,\nconditions\n:\nlist\n[\nConditionLike\n])\n->\nlist\n[\nConditionLike\n]:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nself\n.\nadd\n(\nconditions\n)\nreturn\nconditions\nadd_configuration_space\n#\nadd_configuration_space\n(\nprefix\n:\nstr\n,\nconfiguration_space\n:\nConfigurationSpace\n,\ndelimiter\n:\nstr\n=\n\":\"\n,\nparent_hyperparameter\n:\ndict\n|\nNone\n=\nNone\n,\n)\n->\nConfigurationSpace\nCombine two configuration space by adding one the other configuration\nspace. The contents of the configuration space, which should be added,\nare renamed to\nprefix\n+\ndelimiter\n+ old_name.\nPARAMETER\nDESCRIPTION\nprefix\nThe prefix for the renamed hyperparameter | conditions |\nforbidden clauses\nTYPE:\nstr\nconfiguration_space\nThe configuration space which should be added\nTYPE:\nConfigurationSpace\ndelimiter\nDefaults to ':'\nTYPE:\nstr\nDEFAULT:\n':'\nparent_hyperparameter\nAdds for each new hyperparameter the condition, that\nparent_hyperparameter\nis active. Must be a dictionary with two keys\n\"parent\" and \"value\", meaning that the added configuration space is\nactive when\nparent\nis equal to\nvalue\nTYPE:\ndict\n| None\nDEFAULT:\nNone\nRETURNS\nDESCRIPTION\nConfigurationSpace\nThe configuration space, which was added.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\ndef\nadd_configuration_space\n(\nself\n,\nprefix\n:\nstr\n,\nconfiguration_space\n:\nConfigurationSpace\n,\ndelimiter\n:\nstr\n=\n\":\"\n,\nparent_hyperparameter\n:\ndict\n|\nNone\n=\nNone\n,\n)\n->\nConfigurationSpace\n:\n\"\"\"Combine two configuration space by adding one the other configuration\nspace. The contents of the configuration space, which should be added,\nare renamed to `prefix` + `delimiter` + old_name.\nArgs:\nprefix:\nThe prefix for the renamed hyperparameter | conditions |\nforbidden clauses\nconfiguration_space:\nThe configuration space which should be added\ndelimiter:\nDefaults to ':'\nparent_hyperparameter:\nAdds for each new hyperparameter the condition, that\n`parent_hyperparameter` is active. Must be a dictionary with two keys\n\"parent\" and \"value\", meaning that the added configuration space is\nactive when `parent` is equal to `value`\nReturns:\nThe configuration space, which was added.\n\"\"\"\nprefix_delim\n=\nf\n\"\n{\nprefix\n}{\ndelimiter\n}\n\"\ndef\n_new_name\n(\n_item\n:\nHyperparameter\n)\n->\nstr\n:\nif\n_item\n.\nname\nin\n(\n\"\"\n,\nprefix\n):\nreturn\nprefix\nif\nnot\n_item\n.\nname\n.\nstartswith\n(\nprefix_delim\n):\nreturn\nf\n\"\n{\nprefix_delim\n}{\n_item\n.\nname\n}\n\"\nreturn\n_item\n.\nname\nnew_parameters\n=\n[]\nfor\nhp\nin\nconfiguration_space\n.\nvalues\n():\nnew_hp\n=\ncopy\n.\ncopy\n(\nhp\n)\nnew_hp\n.\nname\n=\n_new_name\n(\nhp\n)\nnew_parameters\n.\nappend\n(\nnew_hp\n)\nconditions_to_add\n=\n[]\nfor\ncondition\nin\nconfiguration_space\n.\nconditions\n:\nnew_condition\n=\ncopy\n.\ncopy\n(\ncondition\n)\ncond_dlcs\n=\n(\nnew_condition\n.\ndlcs\nif\nisinstance\n(\nnew_condition\n,\nConjunction\n)\nelse\n[\nnew_condition\n]\n)\nfor\ncond_dlc\nin\ncond_dlcs\n:\n# Rename children\ncond_dlc\n.\nchild\n.\nname\n=\n_new_name\n(\ncond_dlc\n.\nchild\n)\ncond_dlc\n.\nparent\n.\nname\n=\n_new_name\n(\ncond_dlc\n.\nparent\n)\nconditions_to_add\n.\nappend\n(\nnew_condition\n)\nforbiddens_to_add\n=\n[]\nfor\nforbidden_clause\nin\nconfiguration_space\n.\nforbidden_clauses\n:\nnew_forbidden\n=\ncopy\n.\ncopy\n(\nforbidden_clause\n)\nforb_dlcs\n=\n(\nnew_forbidden\n.\ndlcs\nif\nisinstance\n(\nnew_forbidden\n,\nForbiddenConjunction\n)\nelse\n[\nnew_forbidden\n]\n)\nfor\nforb_dlc\nin\nforb_dlcs\n:\nif\nisinstance\n(\nforb_dlc\n,\nForbiddenRelation\n):\nforb_dlc\n.\nleft\n.\nname\n=\n_new_name\n(\nforb_dlc\n.\nleft\n)\nforb_dlc\n.\nright\n.\nname\n=\n_new_name\n(\nforb_dlc\n.\nright\n)\nelse\n:\nforb_dlc\n.\nhyperparameter\n.\nname\n=\n_new_name\n(\nforb_dlc\n.\nhyperparameter\n)\nforbiddens_to_add\n.\nappend\n(\nnew_forbidden\n)\nself\n.\nadd\n(\nnew_parameters\n,\nconditions_to_add\n,\nforbiddens_to_add\n)\n# Finally, we may need to add conditions to the added search space\nconditions_to_add\n=\n[]\nif\nparent_hyperparameter\nis\nnot\nNone\n:\nparent\n=\nparent_hyperparameter\n[\n\"parent\"\n]\nvalue\n=\nparent_hyperparameter\n[\n\"value\"\n]\n# Only add a condition if the parameter is a top-level parameter of the new\n# configuration space (this will be some kind of tree structure).\nroot_params\n=\n[\nhp\nfor\nhp\nin\nnew_parameters\nif\nlen\n(\nself\n.\nparents_of\n[\nhp\n.\nname\n])\n==\n0\n]\nfor\nparam\nin\nroot_params\n:\nconditions_to_add\n.\nappend\n(\nEqualsCondition\n(\nparam\n,\nparent\n,\nvalue\n))\nif\nlen\n(\nconditions_to_add\n)\n>\n0\n:\nself\n.\nadd\n(\nconditions_to_add\n)\nreturn\nconfiguration_space\nadd_forbidden_clause\n#\nadd_forbidden_clause\n(\nclause\n:\nForbiddenLike\n,\n)\n->\nForbiddenLike\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1300\n1301\n1302\n1303\n1304\n@deprecated\n(\n\"Please use `space.add(clause)`\"\n)\ndef\nadd_forbidden_clause\n(\nself\n,\nclause\n:\nForbiddenLike\n)\n->\nForbiddenLike\n:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nself\n.\nadd\n(\nclause\n)\nreturn\nclause\nadd_forbidden_clauses\n#\nadd_forbidden_clauses\n(\nclauses\n:\nlist\n[\nForbiddenLike\n],\n)\n->\nlist\n[\nForbiddenLike\n]\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1306\n1307\n1308\n1309\n1310\n1311\n1312\n1313\n@deprecated\n(\n\"Please use `space.add(clause)`\"\n)\ndef\nadd_forbidden_clauses\n(\nself\n,\nclauses\n:\nlist\n[\nForbiddenLike\n],\n)\n->\nlist\n[\nForbiddenLike\n]:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nself\n.\nadd\n(\nclauses\n)\nreturn\nclauses\nadd_hyperparameter\n#\nadd_hyperparameter\n(\nhyperparameter\n:\nHyperparameter\n,\n)\n->\nHyperparameter\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1267\n1268\n1269\n1270\n1271\n@deprecated\n(\n\"Please use `space.add(hyperparameter)`\"\n)\ndef\nadd_hyperparameter\n(\nself\n,\nhyperparameter\n:\nHyperparameter\n)\n->\nHyperparameter\n:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nself\n.\nadd\n(\nhyperparameter\n)\nreturn\nhyperparameter\nadd_hyperparameters\n#\nadd_hyperparameters\n(\nhyperparameters\n:\nIterable\n[\nHyperparameter\n],\n)\n->\nlist\n[\nHyperparameter\n]\nDeprecated. Please use\nspace.add()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1273\n1274\n1275\n1276\n1277\n1278\n1279\n1280\n1281\n1282\n1283\n1284\n1285\n1286\n@deprecated\n(\n\"Please use `space.add(hyperparameters)`\"\n)\ndef\nadd_hyperparameters\n(\nself\n,\nhyperparameters\n:\nIterable\n[\nHyperparameter\n],\n)\n->\nlist\n[\nHyperparameter\n]:\n\"\"\"Deprecated. Please use [`space.add()`][ConfigSpace.configuration_space.ConfigurationSpace.add].\"\"\"\n# noqa: E501\nwarnings\n.\nwarn\n(\n\"Please use public function `add()` instead\"\n,\nDeprecationWarning\n,\nstacklevel\n=\n2\n,\n)\nhyperparameters\n=\nlist\n(\nhyperparameters\n)\nself\n.\nadd\n(\nhyperparameters\n)\nreturn\nhyperparameters\ncheck_configuration\n#\ncheck_configuration\n(\nconfiguration\n:\nConfiguration\n)\n->\nNone\nCheck if a configuration is legal. Raises an error if not.\nPARAMETER\nDESCRIPTION\nconfiguration\nConfiguration to check\nTYPE:\nConfiguration\nSource code in\nsrc/ConfigSpace/configuration_space.py\n475\n476\n477\n478\n479\n480\n481\n482\n@deprecated\n(\n\"Please call `configuration.check_valid_configuration()` instead.\"\n)\ndef\ncheck_configuration\n(\nself\n,\nconfiguration\n:\nConfiguration\n)\n->\nNone\n:\n\"\"\"Check if a configuration is legal. Raises an error if not.\nArgs:\nconfiguration: Configuration to check\n\"\"\"\nConfigSpace\n.\nutil\n.\ncheck_configuration\n(\nself\n,\nconfiguration\n.\nget_array\n())\ncheck_configuration_vector_representation\n#\ncheck_configuration_vector_representation\n(\nvector\n:\nArray\n[\nf64\n],\n)\n->\nNone\nRaise error if configuration in vector representation is not legal.\nPARAMETER\nDESCRIPTION\nvector\nconfiguration in vector representation\nTYPE:\nArray\n[\nf64\n]\nSource code in\nsrc/ConfigSpace/configuration_space.py\n484\n485\n486\n487\n488\n489\n490\ndef\ncheck_configuration_vector_representation\n(\nself\n,\nvector\n:\nArray\n[\nf64\n])\n->\nNone\n:\n\"\"\"Raise error if configuration in vector representation is not legal.\nArgs:\nvector: configuration in vector representation\n\"\"\"\nConfigSpace\n.\nutil\n.\ncheck_configuration\n(\nself\n,\nvector\n)\nestimate_size\n#\nestimate_size\n()\n->\nfloat\n|\nint\nEstimate the number of unique configurations.\nThis is\nnp.inf\nin case if there is a single hyperparameter of size\nnp.inf\n(i.e. a\nUniformFloatParameter\n),\notherwise it is the product of the size of all hyperparameters. The function\ncorrectly guesses the number of unique configurations if there are no condition\nand forbidden statements in the configuration spaces. Otherwise, this is an\nupper bound. Use\ngenerate_grid()\nto generate\nall valid configurations if required.\nRETURNS\nDESCRIPTION\nfloat\n|\nint\nThe estimated number of unique configurations\nSource code in\nsrc/ConfigSpace/configuration_space.py\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\ndef\nestimate_size\n(\nself\n)\n->\nfloat\n|\nint\n:\n\"\"\"Estimate the number of unique configurations.\nThis is `np.inf` in case if there is a single hyperparameter of size `np.inf`\n(i.e. a `UniformFloatParameter`),\notherwise it is the product of the size of all hyperparameters. The function\ncorrectly guesses the number of unique configurations if there are no condition\nand forbidden statements in the configuration spaces. Otherwise, this is an\nupper bound. Use [`generate_grid()`][ConfigSpace.util.generate_grid] to generate\nall valid configurations if required.\nReturns:\nThe estimated number of unique configurations\n\"\"\"\nsizes\n=\n[\nhp\n.\nsize\nfor\nhp\nin\nself\n.\nvalues\n()]\nif\nlen\n(\nsizes\n)\n==\n0\n:\nreturn\n0.0\nacc\n:\nint\n|\nfloat\n=\n1\nfor\nsize\nin\nsizes\n:\nacc\n*=\nsize\nreturn\nacc\nfrom_json\nclassmethod\n#\nfrom_json\n(\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n,\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n)\n->\nConfigurationSpace\nDecode a serialized configuration space from a json file.\nPlease see the\nserialization reference\nfor\nmore\nPARAMETER\nDESCRIPTION\npath\nPath to the serialized configuration space\nTYPE:\nstr\n|\nPath\n|\nIO\n[\nstr\n]\ndecoders\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\nTYPE:\nMapping\n[\nLiteral\n['hyperparameters', 'conditions', 'forbiddens'],\nMapping\n[\nstr\n,\n_Decoder\n]] | None\nDEFAULT:\nNone\n**kwargs\nAny additional arguments to pass to\njson.load\nTYPE:\nAny\nDEFAULT:\n{}\nRETURNS\nDESCRIPTION\nConfigurationSpace\nThe decoded configuration space\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1106\n1107\n1108\n1109\n1110\n1111\n1112\n1113\n1114\n1115\n1116\n1117\n1118\n1119\n1120\n1121\n1122\n1123\n1124\n1125\n1126\n1127\n1128\n1129\n1130\n1131\n1132\n1133\n1134\n1135\n1136\n1137\n1138\n1139\n1140\n1141\n1142\n1143\n@classmethod\ndef\nfrom_json\n(\ncls\n,\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n,\n)\n->\nConfigurationSpace\n:\n\"\"\"Decode a serialized configuration space from a json file.\nPlease see the [serialization reference](../../reference/serialization.md) for\nmore\nArgs:\npath: Path to the serialized configuration space\ndecoders:\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\n**kwargs: Any additional arguments to pass to `json.load`\nReturns:\nThe decoded configuration space\n\"\"\"\nif\nisinstance\n(\npath\n,\n(\nstr\n,\nPath\n)):\np\n=\nPath\n(\npath\n)\nwith\np\n.\nopen\n(\n\"r\"\n)\nas\nf\n:\nd\n=\njson\n.\nload\n(\nf\n,\n**\nkwargs\n)\nelse\n:\nd\n=\njson\n.\nload\n(\npath\n,\n**\nkwargs\n)\nreturn\ncls\n.\nfrom_serialized_dict\n(\nd\n,\ndecoders\n=\ndecoders\n)\nfrom_serialized_dict\nclassmethod\n#\nfrom_serialized_dict\n(\nd\n:\ndict\n[\nstr\n,\nAny\n],\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n,\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n)\n->\nConfigurationSpace\nDecode a serialized configuration space from a dictionary.\nPlease see the\nserialization reference\nfor more\nPARAMETER\nDESCRIPTION\nd\nThe serialized configuration space\nTYPE:\ndict\n[\nstr\n,\nAny\n]\ndecoders\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\nTYPE:\nMapping\n[\nLiteral\n['hyperparameters', 'conditions', 'forbiddens'],\nMapping\n[\nstr\n,\n_Decoder\n]] | None\nDEFAULT:\nNone\nRETURNS\nDESCRIPTION\nConfigurationSpace\nThe decoded configuration space\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1003\n1004\n1005\n1006\n1007\n1008\n1009\n1010\n1011\n1012\n1013\n1014\n1015\n1016\n1017\n1018\n1019\n1020\n1021\n1022\n1023\n1024\n1025\n1026\n1027\n1028\n1029\n1030\n1031\n1032\n1033\n1034\n1035\n1036\n1037\n1038\n1039\n1040\n1041\n1042\n1043\n1044\n1045\n1046\n1047\n1048\n1049\n1050\n1051\n1052\n1053\n1054\n1055\n1056\n1057\n1058\n1059\n1060\n1061\n1062\n1063\n1064\n1065\n1066\n1067\n1068\n1069\n1070\n1071\n1072\n1073\n1074\n1075\n1076\n1077\n1078\n1079\n@classmethod\ndef\nfrom_serialized_dict\n(\ncls\n,\nd\n:\ndict\n[\nstr\n,\nAny\n],\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n)\n->\nConfigurationSpace\n:\n\"\"\"Decode a serialized configuration space from a dictionary.\nPlease see the [serialization reference](../../reference/serialization.md) for more\nArgs:\nd: The serialized configuration space\ndecoders:\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\nReturns:\nThe decoded configuration space\n\"\"\"\nuser_decoders\n=\ndecoders\nor\n{}\ndef\nget_decoder\n(\n_decoders\n:\nMapping\n[\nstr\n,\n_Decoder\n])\n->\n_Decoder\n:\ndef\ndec\n(\nitem\n:\ndict\n[\nstr\n,\nAny\n],\ncs\n:\nConfigurationSpace\n,\n_dec\n:\n_Decoder\n,\n)\n->\nAny\n:\n_type\n=\nitem\n.\npop\n(\n\"type\"\n,\nNone\n)\nif\n_type\nis\nNone\n:\nraise\nKeyError\n(\nf\n\"Expected a key 'type' in item\n{\nitem\n}\nbut did not find it.\"\n\" Did you include this in the encoding?\"\n,\n)\ndecoder\n=\n_decoders\n.\nget\n(\n_type\n)\nif\ndecoder\nis\nNone\n:\nraise\nValueError\n(\nf\n\"No found decoder for '\n{\n_type\n}\n'.  Registered decoders are\"\nf\n\"\n{\n_decoders\n.\nkeys\n()\n}\n. Please include a custom `decoder=` if\"\n\" you want to decode this type.\"\n,\n)\nreturn\ndecoder\n(\nitem\n,\ncs\n,\n_dec\n)\nreturn\ndec\nspace\n=\nConfigurationSpace\n(\nname\n=\nd\n.\nget\n(\n\"name\"\n))\n_hyperparameters\n=\nd\n.\nget\n(\n\"hyperparameters\"\n,\n[])\n_conditions\n=\nd\n.\nget\n(\n\"conditions\"\n,\n[])\n_forbiddens\n=\nd\n.\nget\n(\n\"forbiddens\"\n,\n[])\nhp_decoder\n=\nget_decoder\n(\n{\n**\nHYPERPARAMETER_DECODERS\n,\n**\nuser_decoders\n.\nget\n(\n\"hyperparameters\"\n,\n{})},\n)\ncond_decoder\n=\nget_decoder\n(\n{\n**\nCONDITION_DECODERS\n,\n**\nuser_decoders\n.\nget\n(\n\"conditions\"\n,\n{})},\n)\nforb_decoder\n=\nget_decoder\n(\n{\n**\nFORBIDDEN_DECODERS\n,\n**\nuser_decoders\n.\nget\n(\n\"forbiddens\"\n,\n{})},\n)\n# Important that we add hyperparameters first as decoding conditions\n# and forbiddens rely on having access to the hyperparameters\nhyperparameters\n=\n[\nhp_decoder\n(\nhp\n,\nspace\n,\nhp_decoder\n)\nfor\nhp\nin\n_hyperparameters\n]\nspace\n.\nadd\n(\nhyperparameters\n)\nconditions\n=\n[\ncond_decoder\n(\nc\n,\nspace\n,\ncond_decoder\n)\nfor\nc\nin\n_conditions\n]\nforbidden\n=\n[\nforb_decoder\n(\nf\n,\nspace\n,\nforb_decoder\n)\nfor\nf\nin\n_forbiddens\n]\nspace\n.\nadd\n(\nconditions\n,\nforbidden\n)\nreturn\nspace\nfrom_yaml\nclassmethod\n#\nfrom_yaml\n(\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n,\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n)\n->\nConfigurationSpace\nDecode a serialized configuration space from a yaml file.\nPlease see the\nserialization reference\nfor more\nPARAMETER\nDESCRIPTION\npath\nPath to the serialized configuration space\nTYPE:\nstr\n|\nPath\n|\nIO\n[\nstr\n]\ndecoders\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\nTYPE:\nMapping\n[\nLiteral\n['hyperparameters', 'conditions', 'forbiddens'],\nMapping\n[\nstr\n,\n_Decoder\n]] | None\nDEFAULT:\nNone\n**kwargs\nAny additional arguments to pass to\nyaml.safe_load\nTYPE:\nAny\nDEFAULT:\n{}\nRETURNS\nDESCRIPTION\nConfigurationSpace\nThe decoded configuration space\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1172\n1173\n1174\n1175\n1176\n1177\n1178\n1179\n1180\n1181\n1182\n1183\n1184\n1185\n1186\n1187\n1188\n1189\n1190\n1191\n1192\n1193\n1194\n1195\n1196\n1197\n1198\n1199\n1200\n1201\n1202\n1203\n1204\n1205\n1206\n1207\n1208\n1209\n1210\n@classmethod\ndef\nfrom_yaml\n(\ncls\n,\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\ndecoders\n:\n(\nMapping\n[\nLiteral\n[\n\"hyperparameters\"\n,\n\"conditions\"\n,\n\"forbiddens\"\n],\nMapping\n[\nstr\n,\n_Decoder\n],\n]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n,\n)\n->\nConfigurationSpace\n:\n\"\"\"Decode a serialized configuration space from a yaml file.\nPlease see the [serialization reference](../../reference/serialization.md) for more\nArgs:\npath: Path to the serialized configuration space\ndecoders:\nA mapping from one of the kinds of things that can be decoded\nto a dictionary of type names to a decoder that will be used.\nAnything not specified will fall back to the default decoders.\n**kwargs: Any additional arguments to pass to `yaml.safe_load`\nReturns:\nThe decoded configuration space\n\"\"\"\nimport\nyaml\nif\nisinstance\n(\npath\n,\n(\nstr\n,\nPath\n)):\np\n=\nPath\n(\npath\n)\nwith\np\n.\nopen\n(\n\"r\"\n)\nas\nf\n:\nd\n=\nyaml\n.\nsafe_load\n(\nf\n,\n**\nkwargs\n)\nelse\n:\nd\n=\nyaml\n.\nsafe_load\n(\npath\n,\n**\nkwargs\n)\nreturn\ncls\n.\nfrom_serialized_dict\n(\nd\n,\ndecoders\n=\ndecoders\n)\ngenerate_all_continuous_from_bounds\n#\ngenerate_all_continuous_from_bounds\n(\nbounds\n:\nIterable\n[\ntuple\n[\nfloat\n,\nfloat\n]]\n)\n->\nNone\nFill a ConfigurationSpace from a list of bounded numericals.\nThe generated hyperparameters are added to the configuration space.\nPARAMETER\nDESCRIPTION\nbounds\nList containing lists with two elements: lower and upper bound\nTYPE:\nIterable\n[\ntuple\n[\nfloat\n,\nfloat\n]]\nSource code in\nsrc/ConfigSpace/configuration_space.py\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\ndef\ngenerate_all_continuous_from_bounds\n(\nself\n,\nbounds\n:\nIterable\n[\ntuple\n[\nfloat\n,\nfloat\n]],\n)\n->\nNone\n:\n\"\"\"Fill a ConfigurationSpace from a list of bounded numericals.\nThe generated hyperparameters are added to the configuration space.\nArgs:\nbounds: List containing lists with two elements: lower and upper bound\n\"\"\"\nself\n.\nadd\n(\nUniformFloatHyperparameter\n(\nname\n=\nf\n\"x\n{\ni\n}\n\"\n,\nlower\n=\nlower\n,\nupper\n=\nupper\n)\nfor\ni\n,\n(\nlower\n,\nupper\n)\nin\nenumerate\n(\nbounds\n)\n)\nget_active_hyperparameters\n#\nget_active_hyperparameters\n(\nconfiguration\n:\nConfiguration\n|\nArray\n[\nf64\n],\n)\n->\nset\n[\nstr\n]\nSet of active hyperparameter names for a given configuration.\nPARAMETER\nDESCRIPTION\nconfiguration\nConfiguration to get active hyperparameters of\nTYPE:\nConfiguration\n|\nArray\n[\nf64\n]\nRETURNS\nDESCRIPTION\nset\n[\nstr\n]\nThe set of names of all active hyperparameter\nSource code in\nsrc/ConfigSpace/configuration_space.py\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\ndef\nget_active_hyperparameters\n(\nself\n,\nconfiguration\n:\nConfiguration\n|\nArray\n[\nf64\n],\n)\n->\nset\n[\nstr\n]:\n\"\"\"Set of active hyperparameter names for a given configuration.\nArgs:\nconfiguration: Configuration to get active hyperparameters of\nReturns:\nThe set of names of all active hyperparameter\n\"\"\"\nvector\n=\n(\nconfiguration\n.\nget_array\n()\nif\nisinstance\n(\nconfiguration\n,\nConfiguration\n)\nelse\nconfiguration\n)\nactive_hyperparameters\n=\nset\n()\nfor\nhp_name\nin\nself\n.\nkeys\n():\nconditions\n=\nself\n.\nparent_conditions_of\n[\nhp_name\n]\nactive\n=\nTrue\nfor\ncondition\nin\nconditions\n:\nparent_vector_idx\n:\nnp\n.\nintp\n|\nArray\n[\nnp\n.\nintp\n]\nif\nisinstance\n(\ncondition\n,\nConjunction\n):\nassert\ncondition\n.\nparent_vector_ids\nis\nnot\nNone\nparent_vector_idx\n=\ncondition\n.\nparent_vector_ids\nelse\n:\nparent_vector_idx\n=\nnp\n.\nasarray\n(\ncondition\n.\nparent_vector_id\n)\nif\nnp\n.\nisnan\n(\nvector\n[\nparent_vector_idx\n])\n.\nany\n():\nactive\n=\nFalse\nbreak\nif\nnot\ncondition\n.\nsatisfied_by_vector\n(\nvector\n):\nactive\n=\nFalse\nbreak\nif\nactive\n:\nactive_hyperparameters\n.\nadd\n(\nhp_name\n)\nreturn\nactive_hyperparameters\nget_all_conditional_hyperparameters\n#\nget_all_conditional_hyperparameters\n()\n->\nSequence\n[\nstr\n]\nDeprecated. Please use\nspace.conditional_hyperparameters\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1335\n1336\n1337\n1338\n@deprecated\n(\n\"Please use `space.conditional_hyperparameters`\"\n)\ndef\nget_all_conditional_hyperparameters\n(\nself\n)\n->\nSequence\n[\nstr\n]:\n\"\"\"Deprecated. Please use [`space.conditional_hyperparameters`][ConfigSpace.configuration_space.ConfigurationSpace.conditional_hyperparameters].\"\"\"\n# noqa: E501\nreturn\nself\n.\nconditional_hyperparameters\nget_all_unconditional_hyperparameters\n#\nget_all_unconditional_hyperparameters\n()\n->\nSequence\n[\nstr\n]\nDeprecated. Please use\nspace.unconditional_hyperparameters\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1340\n1341\n1342\n1343\n@deprecated\n(\n\"Please use `space.uncoditional_hyperparameters`\"\n)\ndef\nget_all_unconditional_hyperparameters\n(\nself\n)\n->\nSequence\n[\nstr\n]:\n\"\"\"Deprecated. Please use [`space.unconditional_hyperparameters`][ConfigSpace.configuration_space.ConfigurationSpace.unconditional_hyperparameters].\"\"\"\n# noqa: E501\nreturn\nself\n.\nunconditional_hyperparameters\nget_child_conditions_of\n#\nget_child_conditions_of\n(\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nConditionLike\n]\nDeprecated. Please use\nspace.child_conditions_of[name]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1357\n1358\n1359\n1360\n1361\n1362\n1363\n1364\n@deprecated\n(\n\"Please use `space.child_conditions_of[hyperparameter.name]`\"\n)\ndef\nget_child_conditions_of\n(\nself\n,\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nConditionLike\n]:\n\"\"\"Deprecated. Please use [`space.child_conditions_of[name]`][ConfigSpace.configuration_space.ConfigurationSpace.child_conditions_of].\"\"\"\n# noqa: E501\n_name\n=\nname\n.\nname\nif\nisinstance\n(\nname\n,\nHyperparameter\n)\nelse\nname\nreturn\nself\n.\nchild_conditions_of\n[\n_name\n]\nget_children_of\n#\nget_children_of\n(\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nHyperparameter\n]\nDeprecated. Please use\nspace.children_of[name]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1345\n1346\n1347\n1348\n1349\n@deprecated\n(\n\"Please use `space.children_of[hyperparameter.name]`\"\n)\ndef\nget_children_of\n(\nself\n,\nname\n:\nstr\n|\nHyperparameter\n)\n->\nSequence\n[\nHyperparameter\n]:\n\"\"\"Deprecated. Please use [`space.children_of[name]`][ConfigSpace.configuration_space.ConfigurationSpace.children_of].\"\"\"\n# noqa: E501\n_name\n=\nname\n.\nname\nif\nisinstance\n(\nname\n,\nHyperparameter\n)\nelse\nname\nreturn\nself\n.\nchildren_of\n[\n_name\n]\nget_conditions\n#\nget_conditions\n()\n->\nSequence\n[\nConditionLike\n]\nDeprecated. Please use\nspace.conditions\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1325\n1326\n1327\n1328\n@deprecated\n(\n\"Please use `space.conditions`\"\n)\ndef\nget_conditions\n(\nself\n)\n->\nSequence\n[\nConditionLike\n]:\n\"\"\"Deprecated. Please use [`space.conditions`][ConfigSpace.configuration_space.ConfigurationSpace.conditions].\"\"\"\n# noqa: E501\nreturn\nself\n.\nconditions\nget_default_configuration\n#\nget_default_configuration\n()\n->\nConfiguration\nConfiguration containing hyperparameters with default values.\nRETURNS\nDESCRIPTION\nConfiguration\nConfiguration with the set default values\nSource code in\nsrc/ConfigSpace/configuration_space.py\n466\n467\n468\n469\n470\n471\n472\ndef\nget_default_configuration\n(\nself\n)\n->\nConfiguration\n:\n\"\"\"Configuration containing hyperparameters with default values.\nReturns:\nConfiguration with the set default values\n\"\"\"\nreturn\nself\n.\n_check_default_configuration\n()\nget_forbiddens\n#\nget_forbiddens\n()\n->\nSequence\n[\nForbiddenLike\n]\nDeprecated. Please use\nspace.forbidden_clauses\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1330\n1331\n1332\n1333\n@deprecated\n(\n\"Please use `space.forbidden_clauses`\"\n)\ndef\nget_forbiddens\n(\nself\n)\n->\nSequence\n[\nForbiddenLike\n]:\n\"\"\"Deprecated. Please use [`space.forbidden_clauses`][ConfigSpace.configuration_space.ConfigurationSpace.forbidden_clauses].\"\"\"\n# noqa: E501\nreturn\nself\n.\nforbidden_clauses\nget_hyperparameter_by_idx\n#\nget_hyperparameter_by_idx\n(\nidx\n:\nint\n)\n->\nstr\nDeprecated. Please use\nspace.at[idx]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1320\n1321\n1322\n1323\n@deprecated\n(\n\"Please use `space.at[idx]`\"\n)\ndef\nget_hyperparameter_by_idx\n(\nself\n,\nidx\n:\nint\n)\n->\nstr\n:\n\"\"\"Deprecated. Please use [`space.at[idx]`][ConfigSpace.configuration_space.ConfigurationSpace.at].\"\"\"\n# noqa: E501\nreturn\nself\n.\nat\n[\nidx\n]\nget_idx_by_hyperparameter_name\n#\nget_idx_by_hyperparameter_name\n(\nname\n:\nstr\n)\n->\nint\nDeprecated. Please use\nspace.index_of[name]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1315\n1316\n1317\n1318\n@deprecated\n(\n\"Please use `space.index_of[name]`\"\n)\ndef\nget_idx_by_hyperparameter_name\n(\nself\n,\nname\n:\nstr\n)\n->\nint\n:\n\"\"\"Deprecated. Please use [`space.index_of[name]`][ConfigSpace.configuration_space.ConfigurationSpace.index_of].\"\"\"\n# noqa: E501\nreturn\nself\n.\nindex_of\n[\nname\n]\nget_parent_conditions_of\n#\nget_parent_conditions_of\n(\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nCondition\n|\nConjunction\n]\nDeprecated. Please use\nspace.parent_conditions_of[name]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1366\n1367\n1368\n1369\n1370\n1371\n1372\n1373\n@deprecated\n(\n\"Please use `space.parent_conditions_of[hyperparameter.name]`\"\n)\ndef\nget_parent_conditions_of\n(\nself\n,\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nCondition\n|\nConjunction\n]:\n\"\"\"Deprecated. Please use [`space.parent_conditions_of[name]`][ConfigSpace.configuration_space.ConfigurationSpace.parent_conditions_of].\"\"\"\n# noqa: E501\n_name\n=\nname\n.\nname\nif\nisinstance\n(\nname\n,\nHyperparameter\n)\nelse\nname\nreturn\nself\n.\nparent_conditions_of\n[\n_name\n]\nget_parents_of\n#\nget_parents_of\n(\nname\n:\nstr\n|\nHyperparameter\n,\n)\n->\nSequence\n[\nHyperparameter\n]\nDeprecated. Please use\nspace.parents_of[name]\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1351\n1352\n1353\n1354\n1355\n@deprecated\n(\n\"Please use `space.parents_of[hyperparameter.name]`\"\n)\ndef\nget_parents_of\n(\nself\n,\nname\n:\nstr\n|\nHyperparameter\n)\n->\nSequence\n[\nHyperparameter\n]:\n\"\"\"Deprecated. Please use [`space.parents_of[name]`][ConfigSpace.configuration_space.ConfigurationSpace.parents_of].\"\"\"\n# noqa: E501\n_name\n=\nname\n.\nname\nif\nisinstance\n(\nname\n,\nHyperparameter\n)\nelse\nname\nreturn\nself\n.\nparents_of\n[\n_name\n]\nitems\n#\nitems\n()\n->\nItemsView\n[\nstr\n,\nHyperparameter\n]\nReturn an items view of the hyperparameters, same as\ndict.items()\n.\nSource code in\nsrc/ConfigSpace/configuration_space.py\n880\n881\n882\ndef\nitems\n(\nself\n)\n->\nItemsView\n[\nstr\n,\nHyperparameter\n]:\n\"\"\"Return an items view of the hyperparameters, same as `dict.items()`.\"\"\"\n# noqa: D402\nreturn\n{\nname\n:\nnode\n.\nhp\nfor\nname\n,\nnode\nin\nself\n.\n_dag\n.\nnodes\n.\nitems\n()}\n.\nitems\n()\nremove_hyperparameter_priors\n#\nremove_hyperparameter_priors\n()\n->\nConfigurationSpace\nProduces a new ConfigurationSpace where all priors on parameters are removed.\nNon-uniform hyperpararmeters are replaced with uniform ones, and\nCategoricalHyperparameters with weights have their weights removed.\nRETURNS\nDESCRIPTION\nConfigurationSpace\nThe resulting configuration space, without priors on the hyperparameters\nSource code in\nsrc/ConfigSpace/configuration_space.py\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\ndef\nremove_hyperparameter_priors\n(\nself\n)\n->\nConfigurationSpace\n:\n\"\"\"Produces a new ConfigurationSpace where all priors on parameters are removed.\nNon-uniform hyperpararmeters are replaced with uniform ones, and\nCategoricalHyperparameters with weights have their weights removed.\nReturns:\nThe resulting configuration space, without priors on the hyperparameters\n\"\"\"\nuniform_config_space\n=\nConfigurationSpace\n(\n{\nname\n:\np\n.\nto_uniform\n()\nif\nisinstance\n(\np\n,\n(\nNumericalHyperparameter\n,\nCategoricalHyperparameter\n))\nelse\ncopy\n.\ncopy\n(\np\n)\nfor\nname\n,\np\nin\nself\n.\nitems\n()\n},\n)\nuniform_config_space\n.\nadd\n(\nself\n.\nsubstitute_hyperparameters_in_conditions\n(\nself\n.\nconditions\n,\nuniform_config_space\n,\n),\nself\n.\nsubstitute_hyperparameters_in_forbiddens\n(\nself\n.\nforbidden_clauses\n,\nuniform_config_space\n,\n),\n)\nreturn\nuniform_config_space\nsample_configuration\n#\nsample_configuration\n(\nsize\n:\nint\n|\nNone\n=\nNone\n,\n)\n->\nConfiguration\n|\nlist\n[\nConfiguration\n]\nSample\nsize\nconfigurations from the configuration space object.\nPARAMETER\nDESCRIPTION\nsize\nNumber of configurations to sample. Default (\nNone\n) is to\nsample a single configuration.\nTYPE:\nint\n| None\nDEFAULT:\nNone\nRETURNS\nDESCRIPTION\nConfiguration\n|\nlist\n[\nConfiguration\n]\nA single configuration if\nsize\n1 else a list of Configurations\nSource code in\nsrc/ConfigSpace/configuration_space.py\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\ndef\nsample_configuration\n(\nself\n,\nsize\n:\nint\n|\nNone\n=\nNone\n,\n)\n->\nConfiguration\n|\nlist\n[\nConfiguration\n]:\n\"\"\"Sample `size` configurations from the configuration space object.\nArgs:\nsize: Number of configurations to sample. Default (`None`) is to\nsample a single configuration.\nReturns:\nA single configuration if `size` 1 else a list of Configurations\n\"\"\"\nif\nlen\n(\nself\n)\n==\n0\n:\nif\nsize\nis\nNone\n:\nreturn\nConfiguration\n(\nself\n,\nvector\n=\nnp\n.\narray\n([]))\nreturn\n[\nConfiguration\n(\nself\n,\nvector\n=\nnp\n.\narray\n([]))\nfor\n_\nin\nrange\n(\nsize\n)]\nif\nsize\nis\nnot\nNone\nand\nnot\nisinstance\n(\nsize\n,\nint\n):\nraise\nTypeError\n(\nf\n\"Expected int or None, got\n{\ntype\n(\nsize\n)\n}\n\"\n)\nif\nsize\n==\n1\n:\nwarnings\n.\nwarn\n(\n\"Please leave at default or explicitly set `size=None`.\"\n\" In the future, specifying a size will always return a list, even if\"\n\" 1\"\n,\nDeprecationWarning\n,\nstacklevel\n=\n2\n,\n)\n# Maintain old behaviour by setting this\nif\nsize\nis\nNone\n:\nsize\n=\n1\nif\nsize\n<\n1\n:\nreturn\n[]\naccepted_configurations\n:\nlist\n[\nConfiguration\n]\n=\n[]\nnum_hyperparameters\n=\nlen\n(\nself\n)\n# Main sampling loop\nMULT\n=\n(\nlen\n(\nself\n.\nforbidden_clauses\n)\n+\nlen\n(\nself\n.\nconditional_hyperparameters\n)\n)\n/\nnum_hyperparameters\nsample_size\n=\nsize\nwhile\nlen\n(\naccepted_configurations\n)\n<\nsize\n:\nsample_size\n=\nmax\n(\nint\n(\nMULT\n**\n2\n*\nsample_size\n),\n5\n)\n# Sample a vector for each hp, filling out columns\n# OPTIM: We put the hyperparameters as rows as we perform row-wise\n# operations and the matrices themselves are row-oriented in memory,\n# helping to improve cache locality.\nconfig_matrix\n:\nArray\n[\nf64\n]\n=\nnp\n.\nempty\n(\n(\nnum_hyperparameters\n,\nsample_size\n),\ndtype\n=\nf64\n,\n)\nfor\ni\n,\nhp\nin\nenumerate\n(\nself\n.\nvalues\n()):\nconfig_matrix\n[\ni\n]\n=\nhp\n.\n_vector_dist\n.\nsample_vector\n(\nn\n=\nsample_size\n,\nseed\n=\nself\n.\nrandom\n,\n)\n# Apply unconditional forbiddens across the columns (hps)\n# We treat this as an OR, i.e. if any of the forbidden clauses are\n# forbidden, the entire configuration (row) is forbidden\nuncond_forbidden\n:\nMask\n=\nnp\n.\nzeros\n(\nsample_size\n,\ndtype\n=\nnp\n.\nbool_\n)\nfor\nclause\nin\nself\n.\n_dag\n.\nunconditional_forbiddens\n:\nuncond_forbidden\n|=\nclause\n.\nis_forbidden_vector_array\n(\nconfig_matrix\n)\nvalid_configs\n=\nconfig_matrix\n[:,\n~\nuncond_forbidden\n]\nfor\ncnode\nin\nself\n.\n_dag\n.\nminimum_conditions\n:\ncondition\n=\ncnode\n.\ncondition\nsatisfied\n=\ncondition\n.\nsatisfied_by_vector_array\n(\nvalid_configs\n)\nvalid_configs\n[\nnp\n.\nix_\n(\ncnode\n.\nchildren_indices\n,\n~\nsatisfied\n)]\n=\nnp\n.\nnan\n# Now we apply the forbiddens that depend on conditionals\ncond_forbidden\n:\nMask\n=\nnp\n.\nzeros\n(\nvalid_configs\n.\nshape\n[\n1\n],\ndtype\n=\nnp\n.\nbool_\n)\nfor\nclause\nin\nself\n.\n_dag\n.\nconditional_forbiddens\n:\ncond_forbidden\n|=\nclause\n.\nis_forbidden_vector_array\n(\nvalid_configs\n)\nvalid_configs\n=\nvalid_configs\n[:,\n~\ncond_forbidden\n]\n# And now we have a matrix of valid configurations\naccepted_configurations\n.\nextend\n(\n[\nConfiguration\n(\nself\n,\nvector\n=\nvec\n)\nfor\nvec\nin\nvalid_configs\n.\nT\n],\n)\nsample_size\n=\nsize\n-\nlen\n(\naccepted_configurations\n)\nif\nsize\n<=\n1\n:\nreturn\naccepted_configurations\n[\n0\n]\nreturn\naccepted_configurations\n[:\nsize\n]\nseed\n#\nseed\n(\nseed\n:\nint\n)\n->\nNone\nSet the random seed to a number.\nPARAMETER\nDESCRIPTION\nseed\nThe random seed\nTYPE:\nint\nSource code in\nsrc/ConfigSpace/configuration_space.py\n639\n640\n641\n642\n643\n644\n645\ndef\nseed\n(\nself\n,\nseed\n:\nint\n)\n->\nNone\n:\n\"\"\"Set the random seed to a number.\nArgs:\nseed: The random seed\n\"\"\"\nself\n.\nrandom\n=\nnp\n.\nrandom\n.\nRandomState\n(\nseed\n)\nsubstitute_hyperparameters_in_conditions\nstaticmethod\n#\nsubstitute_hyperparameters_in_conditions\n(\nconditions\n:\nIterable\n[\nConditionLike\n],\nnew_configspace\n:\nConfigurationSpace\n,\n)\n->\nlist\n[\nConditionLike\n]\nTakes a set of conditions and generates a new set of conditions with the same\nstructure, where each hyperparameter is replaced with its namesake in\nnew_configspace. As such, the set of conditions remain unchanged, but the\nincluded hyperparameters are changed to match those types that exist in\nnew_configspace.\nPARAMETER\nDESCRIPTION\nconditions\nThe conditions to adjust\nTYPE:\nIterable\n[\nConditionLike\n]\nnew_configspace\nA ConfigurationSpace containing hyperparameters with the same names\nas those in the conditions.\nTYPE:\nConfigurationSpace\nRETURNS\nDESCRIPTION\nlist\n[\nConditionLike\n]\nThe list of conditions, adjusted to fit the new ConfigurationSpace\nSource code in\nsrc/ConfigSpace/configuration_space.py\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n@staticmethod\ndef\nsubstitute_hyperparameters_in_conditions\n(\nconditions\n:\nIterable\n[\nConditionLike\n],\nnew_configspace\n:\nConfigurationSpace\n,\n)\n->\nlist\n[\nConditionLike\n]:\n\"\"\"Takes a set of conditions and generates a new set of conditions with the same\nstructure, where each hyperparameter is replaced with its namesake in\nnew_configspace. As such, the set of conditions remain unchanged, but the\nincluded hyperparameters are changed to match those types that exist in\nnew_configspace.\nArgs:\nconditions: The conditions to adjust\nnew_configspace:\nA ConfigurationSpace containing hyperparameters with the same names\nas those in the conditions.\nReturns:\nThe list of conditions, adjusted to fit the new ConfigurationSpace\n\"\"\"\nnew_conditions\n:\nlist\n[\nConditionLike\n]\n=\n[]\nfor\ncondition\nin\nconditions\n:\nif\nisinstance\n(\ncondition\n,\nConjunction\n):\nconjunction_type\n=\ntype\n(\ncondition\n)\nchildren\n=\ncondition\n.\ndlcs\nsubstituted_children\n=\n(\nConfigurationSpace\n.\nsubstitute_hyperparameters_in_conditions\n(\nchildren\n,\nnew_configspace\n,\n)\n)\nsubstituted_conjunction\n=\nconjunction_type\n(\n*\nsubstituted_children\n)\nnew_conditions\n.\nappend\n(\nsubstituted_conjunction\n)\nelif\nisinstance\n(\ncondition\n,\nCondition\n):\nnew_conditions\n.\nappend\n(\ncondition\n.\n__class__\n(\n**\n{\n**\ncondition\n.\nto_dict\n(),\n\"parent\"\n:\nnew_configspace\n[\ncondition\n.\nparent\n.\nname\n],\n\"child\"\n:\nnew_configspace\n[\ncondition\n.\nchild\n.\nname\n],\n},\n),\n)\nelse\n:\nraise\nTypeError\n(\nf\n\"Did not expect the supplied condition type\n{\ntype\n(\ncondition\n)\n}\n.\"\n,\n)\nreturn\nnew_conditions\nsubstitute_hyperparameters_in_forbiddens\nstaticmethod\n#\nsubstitute_hyperparameters_in_forbiddens\n(\nforbiddens\n:\nIterable\n[\nForbiddenLike\n],\nnew_configspace\n:\nConfigurationSpace\n,\n)\n->\nlist\n[\nForbiddenLike\n]\nTakes a set of forbidden clauses and generates a new set of forbidden clauses\nwith the same structure, where each hyperparameter is replaced with its\nnamesake in new_configspace.\nAs such, the set of forbidden clauses remain unchanged, but the included\nhyperparameters are changed to match those types that exist in new_configspace.\nPARAMETER\nDESCRIPTION\nforbiddens\nAn iterable of forbiddens\nTYPE:\nIterable\n[\nForbiddenLike\n]\nnew_configspace\nConfigurationSpace\nA ConfigurationSpace containing hyperparameters with the same\nnames as those in the forbidden clauses.\nTYPE:\nConfigurationSpace\nRETURNS\nDESCRIPTION\nlist\n[\nForbiddenLike\n]\nThe list of forbidden clauses, adjusted to fit the new ConfigurationSpace\nSource code in\nsrc/ConfigSpace/configuration_space.py\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n@staticmethod\ndef\nsubstitute_hyperparameters_in_forbiddens\n(\nforbiddens\n:\nIterable\n[\nForbiddenLike\n],\nnew_configspace\n:\nConfigurationSpace\n,\n)\n->\nlist\n[\nForbiddenLike\n]:\n\"\"\"Takes a set of forbidden clauses and generates a new set of forbidden clauses\nwith the same structure, where each hyperparameter is replaced with its\nnamesake in new_configspace.\nAs such, the set of forbidden clauses remain unchanged, but the included\nhyperparameters are changed to match those types that exist in new_configspace.\nArgs:\nforbiddens: An iterable of forbiddens\nnew_configspace: ConfigurationSpace\nA ConfigurationSpace containing hyperparameters with the same\nnames as those in the forbidden clauses.\nReturns:\nThe list of forbidden clauses, adjusted to fit the new ConfigurationSpace\n\"\"\"\nnew_forbiddens\n:\nlist\n[\nForbiddenLike\n]\n=\n[]\nfor\nforbidden\nin\nforbiddens\n:\nif\nisinstance\n(\nforbidden\n,\nForbiddenConjunction\n):\nsubstituted_children\n=\n(\nConfigurationSpace\n.\nsubstitute_hyperparameters_in_forbiddens\n(\nforbidden\n.\ncomponents\n,\nnew_configspace\n,\n)\n)\nsubstituted_conjunction\n=\nforbidden\n.\n__class__\n(\n*\nsubstituted_children\n)\nnew_forbiddens\n.\nappend\n(\nsubstituted_conjunction\n)\nelif\nisinstance\n(\nforbidden\n,\nForbiddenClause\n):\nif\nisinstance\n(\nforbidden\n,\nForbiddenInClause\n):\nnew_forbiddens\n.\nappend\n(\nforbidden\n.\n__class__\n(\nhyperparameter\n=\nnew_configspace\n[\nforbidden\n.\nhyperparameter\n.\nname\n],\nvalues\n=\nforbidden\n.\nvalues\n,\n),\n)\nelif\nisinstance\n(\nforbidden\n,\nForbiddenEqualsClause\n):\nnew_forbiddens\n.\nappend\n(\nforbidden\n.\n__class__\n(\nhyperparameter\n=\nnew_configspace\n[\nforbidden\n.\nhyperparameter\n.\nname\n],\nvalue\n=\nforbidden\n.\nvalue\n,\n),\n)\nelse\n:\nraise\nTypeError\n(\nf\n\"Forbidden of type '\n{\ntype\n(\nforbidden\n)\n}\n' not recognized.\"\n,\n)\nelif\nisinstance\n(\nforbidden\n,\nForbiddenRelation\n):\nnew_forbiddens\n.\nappend\n(\nforbidden\n.\n__class__\n(\nleft\n=\nnew_configspace\n[\nforbidden\n.\nleft\n.\nname\n],\nright\n=\nnew_configspace\n[\nforbidden\n.\nright\n.\nname\n],\n),\n)\nelse\n:\nraise\nTypeError\n(\nf\n\"Did not expect type\n{\ntype\n(\nforbidden\n)\n}\n.\"\n)\nreturn\nnew_forbiddens\nto_json\n#\nto_json\n(\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\nencoders\n:\n(\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n)\n->\nNone\nSerialize the configuration space to a JSON file.\nPlease see the\nserialization reference\nfor more\nPARAMETER\nDESCRIPTION\npath\nPath to the file or a file object to write to\nTYPE:\nstr\n|\nPath\n|\nIO\n[\nstr\n]\nencoders\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\nTYPE:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]] | None\nDEFAULT:\nNone\n**kwargs\nAdditional arguments to pass to\njson.dump\nTYPE:\nAny\nDEFAULT:\n{}\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1081\n1082\n1083\n1084\n1085\n1086\n1087\n1088\n1089\n1090\n1091\n1092\n1093\n1094\n1095\n1096\n1097\n1098\n1099\n1100\n1101\n1102\n1103\n1104\ndef\nto_json\n(\nself\n,\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\nencoders\n:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n=\nNone\n,\n**\nkwargs\n:\nAny\n,\n)\n->\nNone\n:\n\"\"\"Serialize the configuration space to a JSON file.\nPlease see the [serialization reference](../../reference/serialization.md) for more\nArgs:\npath: Path to the file or a file object to write to\nencoders:\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\n**kwargs: Additional arguments to pass to `json.dump`\n\"\"\"\nserialized\n=\nself\n.\nto_serialized_dict\n(\nencoders\n=\nencoders\n)\nif\nisinstance\n(\npath\n,\n(\nstr\n,\nPath\n)):\nwith\nopen\n(\npath\n,\n\"w\"\n)\nas\nf\n:\njson\n.\ndump\n(\nserialized\n,\nf\n,\n**\nkwargs\n)\nelse\n:\njson\n.\ndump\n(\nserialized\n,\npath\n,\n**\nkwargs\n)\nto_serialized_dict\n#\nto_serialized_dict\n(\nencoders\n:\n(\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n)\n=\nNone\n)\n->\ndict\n[\nstr\n,\nAny\n]\nSerialize the configuration space to a dictionary.\nPlease see the\nserialization reference\nfor more\nPARAMETER\nDESCRIPTION\nencoders\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\nTYPE:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]] | None\nDEFAULT:\nNone\nRETURNS\nDESCRIPTION\ndict\n[\nstr\n,\nAny\n]\nA dictionary containing the serialized configuration space\nSource code in\nsrc/ConfigSpace/configuration_space.py\n952\n953\n954\n955\n956\n957\n958\n959\n960\n961\n962\n963\n964\n965\n966\n967\n968\n969\n970\n971\n972\n973\n974\n975\n976\n977\n978\n979\n980\n981\n982\n983\n984\n985\n986\n987\n988\n989\n990\n991\n992\n993\n994\n995\n996\n997\n998\n999\n1000\n1001\ndef\nto_serialized_dict\n(\nself\n,\nencoders\n:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n=\nNone\n,\n)\n->\ndict\n[\nstr\n,\nAny\n]:\n\"\"\"Serialize the configuration space to a dictionary.\nPlease see the [serialization reference](../../reference/serialization.md) for more\nArgs:\nencoders:\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\nReturns:\nA dictionary containing the serialized configuration space\n\"\"\"\n# NOTE: Used to be called JSON format\nSERIALIZATION_FORMAT_VERSION\n=\n0.4\n_encoders\n=\n{\n**\nHYPERPARAMETER_ENCODERS\n,\n**\nCONDITION_ENCODERS\n,\n**\nFORBIDDEN_ENCODERS\n,\n**\n(\nencoders\nor\n{}),\n}\ndef\nenc\n(\nitem\n:\nAny\n,\n_enc\n:\n_Encoder\n)\n->\ndict\n[\nstr\n,\nAny\n]:\nkey\n=\ntype\n(\nitem\n)\nres\n=\n_encoders\n.\nget\n(\nkey\n)\nif\nres\nis\nNone\n:\nraise\nValueError\n(\nf\n\"No found encoder for '\n{\nkey\n}\n'. Registered encoders are\"\nf\n\"\n{\n_encoders\n.\nkeys\n()\n}\n. Please include a custom `encoders=` if\"\n\" you want to encode this type.\"\n,\n)\ntype_name\n,\nencoder\n=\nres\nencoding\n=\nencoder\n(\nitem\n,\n_enc\n)\nreturn\n{\n\"type\"\n:\ntype_name\n,\n**\nencoding\n}\nfrom\nConfigSpace\nimport\n__version__\nreturn\n{\n\"name\"\n:\nself\n.\nname\n,\n\"hyperparameters\"\n:\n[\nenc\n(\nhp\n,\nenc\n)\nfor\nhp\nin\nself\n.\nvalues\n()],\n\"conditions\"\n:\n[\nenc\n(\nc\n,\nenc\n)\nfor\nc\nin\nself\n.\nconditions\n],\n\"forbiddens\"\n:\n[\nenc\n(\nf\n,\nenc\n)\nfor\nf\nin\nself\n.\nforbidden_clauses\n],\n\"python_module_version\"\n:\n__version__\n,\n\"format_version\"\n:\nSERIALIZATION_FORMAT_VERSION\n,\n}\nto_yaml\n#\nto_yaml\n(\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\nencoders\n:\n(\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n)\n=\nNone\n,\n**\nkwargs\n:\nAny\n)\n->\nNone\nSerialize the configuration space to a JSON file.\nPlease see the\nserialization reference\nfor more\nPARAMETER\nDESCRIPTION\npath\nPath to the file or a file object to write to\nTYPE:\nstr\n|\nPath\n|\nIO\n[\nstr\n]\nencoders\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\nTYPE:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]] | None\nDEFAULT:\nNone\n**kwargs\nAdditional arguments to pass to\njson.dump\nTYPE:\nAny\nDEFAULT:\n{}\nSource code in\nsrc/ConfigSpace/configuration_space.py\n1145\n1146\n1147\n1148\n1149\n1150\n1151\n1152\n1153\n1154\n1155\n1156\n1157\n1158\n1159\n1160\n1161\n1162\n1163\n1164\n1165\n1166\n1167\n1168\n1169\n1170\ndef\nto_yaml\n(\nself\n,\npath\n:\nstr\n|\nPath\n|\nIO\n[\nstr\n],\n*\n,\nencoders\n:\nMapping\n[\ntype\n,\ntuple\n[\nstr\n,\n_Encoder\n]]\n|\nNone\n=\nNone\n,\n**\nkwargs\n:\nAny\n,\n)\n->\nNone\n:\n\"\"\"Serialize the configuration space to a JSON file.\nPlease see the [serialization reference](../../reference/serialization.md) for more\nArgs:\npath: Path to the file or a file object to write to\nencoders:\nA mapping from types to a tuple of the type name and an encoder\nfunction. If not provided, the default encoders will be used.\n**kwargs: Additional arguments to pass to `json.dump`\n\"\"\"\nimport\nyaml\nserialized\n=\nself\n.\nto_serialized_dict\n(\nencoders\n=\nencoders\n)\nif\nisinstance\n(\npath\n,\n(\nstr\n,\nPath\n)):\nwith\nopen\n(\npath\n,\n\"w\"\n)\nas\nf\n:\nyaml\n.\ndump\n(\nserialized\n,\nf\n,\n**\nkwargs\n)\nelse\n:\nyaml\n.\ndump\n(\nserialized\n,\npath\n,\n**\nkwargs\n)",
    "url": "https://automl.github.io/ConfigSpace/latest/api/ConfigSpace/configuration_space/"
  }
]