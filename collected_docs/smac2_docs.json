[
  {
    "title": "smac.facade.blackbox_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.blackbox_facade.\nBlackBoxFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nAbstractFacade\nstatic\nget_acquisition_function\n(\nscenario\n,\n*\n,\nxi\n=\n0.0\n)\n[source]\n¶\nReturns an Expected Improvement acquisition function.\nParameters\n:\nscenario\n(\nScenario\n) –\nxi\n(\nfloat\n,\ndefaults to 0.0\n) – Controls the balance between exploration and exploitation of the\nacquisition function.\nReturn type\n:\nEI\nstatic\nget_acquisition_maximizer\n(\nscenario\n,\n*\n,\nchallengers\n=\n1000\n,\nlocal_search_iterations\n=\n10\n)\n[source]\n¶\nReturns local and sorted random search as acquisition maximizer.\nParameters\n:\nchallengers\n(\nint\n,\ndefaults to 1000\n) – Number of challengers.\nlocal_search_iterations\n(\nint\n,\ndefaults to 10\n) – Number of local search iterations.\nReturn type\n:\nLocalAndSortedRandomSearch\nstatic\nget_initial_design\n(\nscenario\n,\n*\n,\nn_configs\n=\nNone\n,\nn_configs_per_hyperparamter\n=\n8\n,\nmax_ratio\n=\n0.25\n,\nadditional_configs\n=\n[]\n)\n[source]\n¶\nReturns a Sobol design instance.\nParameters\n:\nscenario\n(\nScenario\n) –\nn_configs\n(\nint\n|\nNone\n,\ndefaults to None\n) – Number of initial configurations (disables the arguments\nn_configs_per_hyperparameter\n).\nn_configs_per_hyperparameter\n(\nint\n,\ndefaults to 8\n) – Number of initial configurations per hyperparameter. For example, if my configuration space covers five\nhyperparameters and\nn_configs_per_hyperparameter\nis set to 10, then 50 initial configurations will be\nsamples.\nmax_ratio\n(\nfloat\n,\ndefaults to 0.25\n) – Use at most\nscenario.n_trials\n*\nmax_ratio\nnumber of configurations in the initial design.\nAdditional configurations are not affected by this parameter.\nadditional_configs\n(\nlist\n[\nConfiguration\n]\n,\ndefaults to\n[\n]\n) – Adds additional configurations to the initial design.\nReturn type\n:\nSobolInitialDesign\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\nmax_config_calls\n=\n3\n,\nmax_incumbents\n=\n20\n)\n[source]\n¶\nReturns\nIntensifier\nas intensifier. Uses the default configuration for\nrace_against\n.\nParameters\n:\nscenario\n(\nScenario\n) –\nmax_config_calls\n(\nint\n,\ndefaults to 3\n) – Maximum number of configuration evaluations. Basically, how many instance-seed keys should be evaluated at\nmaximum for a configuration.\nmax_incumbents\n(\nint\n,\ndefaults to 10\n) – How many incumbents to keep track of in the case of multi-objective.\nReturn type\n:\nIntensifier\nstatic\nget_kernel\n(\nscenario\n)\n[source]\n¶\nReturns a kernel for the Gaussian Process surrogate model.\nThe kernel is a composite of kernels depending on the type of hyperparameters:\ncategorical (HammingKernel), continuous (Matern), and noise kernels (White).\nReturn type\n:\nKernel\nstatic\nget_model\n(\nscenario\n,\n*\n,\nmodel_type\n=\nNone\n,\nkernel\n=\nNone\n)\n[source]\n¶\nReturns a Gaussian Process surrogate model.\nParameters\n:\nscenario\n(\nScenario\n) –\nmodel_type\n(\nstr\n|\nNone\n,\ndefaults to None\n) – Which Gaussian Process model should be chosen. Choose between\nvanilla\nand\nmcmc\n.\nkernel\n(\nkernels.Kernel\n|\nNone\n,\ndefaults to None\n) – The kernel used in the surrogate model.\nReturns\n:\nmodel\n– The instantiated gaussian process.\nReturn type\n:\nGaussianProcess\n|\nMCMCGaussianProcess\nstatic\nget_multi_objective_algorithm\n(\nscenario\n,\n*\n,\nobjective_weights\n=\nNone\n)\n[source]\n¶\nReturns the mean aggregation strategy for the multi-objective algorithm.\nParameters\n:\nscenario\n(\nScenario\n) –\nobjective_weights\n(\nlist\n[\nfloat\n]\n|\nNone\n,\ndefaults to None\n) – Weights for averaging the objectives in a weighted manner. Must be of the same length as the number of\nobjectives.\nReturn type\n:\nMeanAggregationStrategy\nstatic\nget_random_design\n(\nscenario\n,\n*\n,\nprobability\n=\n0.08447232371720552\n)\n[source]\n¶\nReturns\nProbabilityRandomDesign\nfor interleaving configurations.\nParameters\n:\nprobability\n(\nfloat\n,\ndefaults to 0.08447232371720552\n) – Probability that a configuration will be drawn at random.\nReturn type\n:\nProbabilityRandomDesign\nstatic\nget_runhistory_encoder\n(\nscenario\n)\n[source]\n¶\nReturns the default runhistory encoder.\nReturn type\n:\nRunHistoryEncoder",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.blackbox_facade.html"
  },
  {
    "title": "smac.facade.abstract_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.abstract_facade.\nAbstractFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nobject\nFacade is an abstraction on top of the SMBO backend to organize the components of a Bayesian Optimization loop\nin a configurable and separable manner to suit the various needs of different (hyperparameter) optimization\npipelines.\nWith the exception to scenario and\ntarget_function\n, which are expected of the user, the parameters\nmodel\n,\nacquisition_function\n,\nacquisition_maximizer\n,\ninitial_design\n,\nrandom_design\n,\nintensifier\n,\nmulti_objective_algorithm\n,\nrunhistory_encoder\ncan either be explicitly specified in the subclasses’\nget_*\nmethods (defining a specific BO pipeline) or be instantiated by the user to overwrite a pipeline\ncomponents explicitly.\nParameters\n:\nscenario\n(\nScenario\n) – The scenario object, holding all environmental information.\ntarget_function\n(\nCallable\n|\nstr\n|\nAbstractRunner\n) – This function is called internally to judge a trial’s performance. If a string is passed,\nit is assumed to be a script. In this case,\nTargetFunctionScriptRunner\nis used to run the script.\nmodel\n(\nAbstractModel\n|\nNone\n,\ndefaults to None\n) – The surrogate model.\nacquisition_function\n(\nAbstractAcquisitionFunction\n|\nNone\n,\ndefaults to None\n) – The acquisition function.\nacquisition_maximizer\n(\nAbstractAcquisitionMaximizer\n|\nNone\n,\ndefaults to None\n) – The acquisition maximizer, deciding which configuration is most promising based on the surrogate model and\nacquisition function.\ninitial_design\n(\nInitialDesign\n|\nNone\n,\ndefaults to None\n) – The sampled configurations from the initial design are evaluated before the Bayesian optimization loop starts.\nrandom_design\n(\nRandomDesign\n|\nNone\n,\ndefaults to None\n) – The random design is used in the acquisition maximizer, deciding whether the next configuration should be drawn\nfrom the acquisition function or randomly.\nintensifier\n(\nAbstractIntensifier\n|\nNone\n,\ndefaults to None\n) – The intensifier decides which trial (combination of configuration, seed, budget and instance) should be run\nnext.\nmulti_objective_algorithm\n(\nAbstractMultiObjectiveAlgorithm\n|\nNone\n,\ndefaults to None\n) – In case of multiple objectives, the objectives need to be interpreted so that an optimization is possible.\nThe multi-objective algorithm takes care of that.\nrunhistory_encoder\n(\nRunHistoryEncoder\n|\nNone\n,\ndefaults to None\n) – Based on the runhistory, the surrogate model is trained. However, the data first needs to be encoded, which\nis done by the runhistory encoder. For example, inactive hyperparameters need to be encoded or cost values\ncan be log transformed.\nlogging_level\n(\nint\n|\nPath\n|\nLiteral\n[\nFalse\n]\n|\nNone\n) – The level of logging (the lowest level 0 indicates the debug level). If a path is passed, a yaml file is\nexpected with the logging configuration. If nothing is passed, the default logging.yml from SMAC is used.\nIf False is passed, SMAC will not do any customization of the logging setup and the responsibility is left\nto the user.\ncallbacks\n(\nlist\n[\nCallback\n]\n,\ndefaults to\n[\n]\n) – Callbacks, which are incorporated into the optimization loop.\noverwrite\n(\nbool\n,\ndefaults to False\n) – When True, overwrites the run results if a previous run is found that is\ninconsistent in the meta data with the current setup. If\noverwrite\nis set to False, the user is asked\nfor the exact behaviour (overwrite completely, save old run, or use old results).\ndask_client\n(\nClient\n|\nNone\n,\ndefaults to None\n) – User-created dask client, which can be used to start a dask cluster and then attach SMAC to it. This will not\nbe closed automatically and will have to be closed manually if provided explicitly. If none is provided\n(default), a local one will be created for you and closed upon completion.\nask\n(\n)\n[source]\n¶\nAsks the intensifier for the next trial.\nReturn type\n:\nTrialInfo\nabstract\nstatic\nget_acquisition_function\n(\nscenario\n)\n[source]\n¶\nReturns the acquisition function instance used in the BO loop,\ndefining the exploration/exploitation trade-off.\nReturn type\n:\nAbstractAcquisitionFunction\nabstract\nstatic\nget_acquisition_maximizer\n(\nscenario\n)\n[source]\n¶\nReturns the acquisition optimizer instance to be used in the BO loop,\nspecifying how the acquisition function instance is optimized.\nReturn type\n:\nAbstractAcquisitionMaximizer\nstatic\nget_config_selector\n(\nscenario\n,\n*\n,\nretrain_after\n=\n8\n,\nretries\n=\n16\n)\n[source]\n¶\nReturns the default configuration selector.\nReturn type\n:\nConfigSelector\nabstract\nstatic\nget_initial_design\n(\nscenario\n)\n[source]\n¶\nReturns an instance of the initial design class to be used in the BO loop,\nspecifying how the configurations the BO loop is ‘warm-started’ with are selected.\nReturn type\n:\nAbstractInitialDesign\nabstract\nstatic\nget_intensifier\n(\nscenario\n)\n[source]\n¶\nReturns the intensifier instance to be used in the BO loop,\nspecifying how to challenge the incumbent configuration on other problem instances.\nReturn type\n:\nAbstractIntensifier\nabstract\nstatic\nget_model\n(\nscenario\n)\n[source]\n¶\nReturns the surrogate cost model instance used in the BO loop.\nReturn type\n:\nAbstractModel\nabstract\nstatic\nget_multi_objective_algorithm\n(\nscenario\n)\n[source]\n¶\nReturns the multi-objective algorithm instance to be used in the BO loop,\nspecifying the scalarization strategy for multiple objectives’ costs.\nReturn type\n:\nAbstractMultiObjectiveAlgorithm\nabstract\nstatic\nget_random_design\n(\nscenario\n)\n[source]\n¶\nReturns an instance of the random design class to be used in the BO loop,\nspecifying how to interleave the BO iterations with randomly selected configurations.\nReturn type\n:\nAbstractRandomDesign\nabstract\nstatic\nget_runhistory_encoder\n(\nscenario\n)\n[source]\n¶\nReturns an instance of the runhistory encoder class to be used in the BO loop,\nspecifying how the runhistory is to be prepared for the next surrogate model.\nReturn type\n:\nAbstractRunHistoryEncoder\nproperty\nintensifier\n:\nAbstractIntensifier\n¶\nThe optimizer which is responsible for the BO loop. Keeps track of useful information like status.\nproperty\nmeta\n:\ndict\n[\nstr\n,\nAny\n]\n¶\nGenerates a hash based on all components of the facade. This is used for the run name or to determine\nwhether a run should be continued or not.\noptimize\n(\n)\n[source]\n¶\nOptimizes the configuration of the algorithm.\nReturns\n:\nincumbent\n– Best found configuration.\nReturn type\n:\nConfiguration\nproperty\noptimizer\n:\nSMBO\n¶\nThe optimizer which is responsible for the BO loop. Keeps track of useful information like status.\nproperty\nrunhistory\n:\nRunHistory\n¶\nThe runhistory which is filled with all trials during the optimization process.\nproperty\nscenario\n:\nScenario\n¶\nThe scenario object which holds all environment information.\ntell\n(\ninfo\n,\nvalue\n,\nsave\n=\nTrue\n)\n[source]\n¶\nAdds the result of a trial to the runhistory and updates the intensifier.\nParameters\n:\ninfo\n(\nTrialInfo\n) – Describes the trial from which to process the results.\nvalue\n(\nTrialValue\n) – Contains relevant information regarding the execution of a trial.\nsave\n(\nbool\n,\noptional to True\n) – Whether the runhistory should be saved.\nReturn type\n:\nNone\nvalidate\n(\nconfig\n,\n*\n,\nseed\n=\nNone\n)\n[source]\n¶\nValidates a configuration on seeds different from the ones used in the optimization process and on the\nhighest budget (if budget type is real-valued).\nParameters\n:\nconfig\n(\nConfiguration\n) – Configuration to validate\ninstances\n(\nlist\n[\nstr\n]\n|\nNone\n,\ndefaults to None\n) – Which instances to validate. If None, all instances specified in the scenario are used.\nIn case that the budget type is real-valued, this argument is ignored.\nseed\n(\nint\n|\nNone\n,\ndefaults to None\n) – If None, the seed from the scenario is used.\nReturns\n:\ncost\n– The averaged cost of the configuration. In case of multi-fidelity, the cost of each objective is\naveraged.\nReturn type\n:\nfloat | list[float]",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.abstract_facade.html"
  },
  {
    "title": "smac.facade.algorithm_configuration_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.algorithm_configuration_facade.\nAlgorithmConfigurationFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nAbstractFacade\nstatic\nget_acquisition_function\n(\nscenario\n,\n*\n,\nxi\n=\n0.0\n)\n[source]\n¶\nReturns an Expected Improvement acquisition function.\nParameters\n:\nscenario\n(\nScenario\n) –\nxi\n(\nfloat\n,\ndefaults to 0.0\n) – Controls the balance between exploration and exploitation of the\nacquisition function.\nReturn type\n:\nEI\nstatic\nget_acquisition_maximizer\n(\nscenario\n)\n[source]\n¶\nReturns local and sorted random search as acquisition maximizer.\nReturn type\n:\nLocalAndSortedRandomSearch\nstatic\nget_initial_design\n(\nscenario\n,\n*\n,\nadditional_configs\n=\n[]\n)\n[source]\n¶\nReturns an initial design, which returns the default configuration.\nParameters\n:\nadditional_configs\n(\nlist\n[\nConfiguration\n]\n,\ndefaults to\n[\n]\n) – Adds additional configurations to the initial design.\nReturn type\n:\nDefaultInitialDesign\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\nmax_config_calls\n=\n2000\n,\nmax_incumbents\n=\n10\n)\n[source]\n¶\nReturns\nIntensifier\nas intensifier. Supports budgets.\nParameters\n:\nmax_config_calls\n(\nint\n,\ndefaults to 3\n) – Maximum number of configuration evaluations. Basically, how many instance-seed keys should be evaluated at\nmaximum for a configuration.\nmax_incumbents\n(\nint\n,\ndefaults to 10\n) – How many incumbents to keep track of in the case of multi-objective.\nReturn type\n:\nIntensifier\nstatic\nget_model\n(\nscenario\n,\n*\n,\nn_trees\n=\n10\n,\nratio_features\n=\n0.8333333333333334\n,\nmin_samples_split\n=\n3\n,\nmin_samples_leaf\n=\n3\n,\nmax_depth\n=\n20\n,\nbootstrapping\n=\nTrue\n,\npca_components\n=\n4\n)\n[source]\n¶\nReturns a random forest as surrogate model.\nParameters\n:\nn_trees\n(\nint\n,\ndefaults to 10\n) – The number of trees in the random forest.\nratio_features\n(\nfloat\n,\ndefaults to 5.0 / 6.0\n) – The ratio of features that are considered for splitting.\nmin_samples_split\n(\nint\n,\ndefaults to 3\n) – The minimum number of data points to perform a split.\nmin_samples_leaf\n(\nint\n,\ndefaults to 3\n) – The minimum number of data points in a leaf.\nmax_depth\n(\nint\n,\ndefaults to 20\n) – The maximum depth of a single tree.\nbootstrapping\n(\nbool\n,\ndefaults to True\n) – Enables bootstrapping.\npca_components\n(\nfloat\n,\ndefaults to 4\n) – Number of components to keep when using PCA to reduce dimensionality of instance features.\nReturn type\n:\nRandomForest\nstatic\nget_multi_objective_algorithm\n(\nscenario\n,\n*\n,\nobjective_weights\n=\nNone\n)\n[source]\n¶\nReturns the mean aggregation strategy for the multi objective algorithm.\nParameters\n:\nscenario\n(\nScenario\n) –\nobjective_weights\n(\nlist\n[\nfloat\n]\n|\nNone\n,\ndefaults to None\n) – Weights for averaging the objectives in a weighted manner. Must be of the same length as the number of\nobjectives.\nReturn type\n:\nMeanAggregationStrategy\nstatic\nget_random_design\n(\nscenario\n,\n*\n,\nprobability\n=\n0.5\n)\n[source]\n¶\nReturns\nProbabilityRandomDesign\nfor interleaving configurations.\nParameters\n:\nprobability\n(\nfloat\n,\ndefaults to 0.5\n) – Probability that a configuration will be drawn at random.\nReturn type\n:\nProbabilityRandomDesign\nstatic\nget_runhistory_encoder\n(\nscenario\n)\n[source]\n¶\nReturns the default runhistory encoder.\nReturn type\n:\nRunHistoryEncoder",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.algorithm_configuration_facade.html"
  },
  {
    "title": "smac.facade.hyperband_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.hyperband_facade.\nHyperbandFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nRandomFacade\nFacade to use model-free Hyperband\n[LJDR18]\nfor algorithm configuration.\nUses Random Aggressive Online Racing (ROAR) to compare configurations, a random\ninitial design and the Hyperband intensifier.\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\neta\n=\n3\n,\nn_seeds\n=\n1\n,\ninstance_seed_order\n=\n'shuffle_once'\n,\nmax_incumbents\n=\n10\n,\nincumbent_selection\n=\n'highest_observed_budget'\n)\n[source]\n¶\nReturns a Hyperband intensifier instance. Budgets are supported.\nReturn type\n:\nHyperband\neta\nint, defaults to 3\nInput that controls the proportion of configurations discarded in each round of Successive Halving.\nn_seeds\nint, defaults to 1\nHow many seeds to use for each instance.\ninstance_seed_order\nstr, defaults to “shuffle_once”\nHow to order the instance-seed pairs. Can be set to:\n* None: No shuffling at all and use the instance-seed order provided by the user.\n* “shuffle_once”: Shuffle the instance-seed keys once and use the same order across all runs.\n* “shuffle”: Shuffle the instance-seed keys for each bracket individually.\nincumbent_selection\nstr, defaults to “any_budget”\nHow to select the incumbent when using budgets. Can be set to:\n* “any_budget”: Incumbent is the best on any budget i.e., best performance regardless of budget.\n* “highest_observed_budget”: Incumbent is the best in the highest budget run so far.\n* “highest_budget”: Incumbent is selected only based on the highest budget.\nmax_incumbents\nint, defaults to 10\nHow many incumbents to keep track of in the case of multi-objective.",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.hyperband_facade.html"
  },
  {
    "title": "smac.facade.multi_fidelity_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.multi_fidelity_facade.\nMultiFidelityFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nHyperparameterOptimizationFacade\nThis facade configures SMAC in a multi-fidelity setting.\nstatic\nget_initial_design\n(\nscenario\n,\n*\n,\nn_configs\n=\nNone\n,\nn_configs_per_hyperparamter\n=\n10\n,\nmax_ratio\n=\n0.25\n,\nadditional_configs\n=\n[]\n)\n[source]\n¶\nReturns a random initial design.\nParameters\n:\nscenario\n(\nScenario\n) –\nn_configs\n(\nint\n|\nNone\n,\ndefaults to None\n) – Number of initial configurations (disables the arguments\nn_configs_per_hyperparameter\n).\nn_configs_per_hyperparameter\n(\nint\n,\ndefaults to 10\n) – Number of initial configurations per hyperparameter. For example, if my configuration space covers five\nhyperparameters and\nn_configs_per_hyperparameter\nis set to 10, then 50 initial configurations will be\nsamples.\nmax_ratio\n(\nfloat\n,\ndefaults to 0.1\n) – Use at most\nscenario.n_trials\n*\nmax_ratio\nnumber of configurations in the initial design.\nAdditional configurations are not affected by this parameter.\nadditional_configs\n(\nlist\n[\nConfiguration\n]\n,\ndefaults to\n[\n]\n) – Adds additional configurations to the initial design.\nReturn type\n:\nRandomInitialDesign\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\neta\n=\n3\n,\nn_seeds\n=\n1\n,\ninstance_seed_order\n=\n'shuffle_once'\n,\nmax_incumbents\n=\n10\n,\nincumbent_selection\n=\n'highest_observed_budget'\n)\n[source]\n¶\nReturns a Hyperband intensifier instance. Budgets are supported.\nReturn type\n:\nHyperband\neta\nint, defaults to 3\nInput that controls the proportion of configurations discarded in each round of Successive Halving.\nn_seeds\nint, defaults to 1\nHow many seeds to use for each instance.\ninstance_seed_order\nstr, defaults to “shuffle_once”\nHow to order the instance-seed pairs. Can be set to:\n* None: No shuffling at all and use the instance-seed order provided by the user.\n* “shuffle_once”: Shuffle the instance-seed keys once and use the same order across all runs.\n* “shuffle”: Shuffles the instance-seed keys for each bracket individually.\nincumbent_selection\nstr, defaults to “any_budget”\nHow to select the incumbent when using budgets. Can be set to:\n* “any_budget”: Incumbent is the best on any budget, i.e., the best performance regardless of budget.\n* “highest_observed_budget”: Incumbent is the best in the highest budget run so far.\nrefer to\nrunhistory.get_trials\nfor more details. Crucially, if true, then a\nfor a given config-instance-seed, only the highest (so far executed) budget is used for\ncomparison against the incumbent. Notice, that if the highest observed budget is smaller\nthan the highest budget of the incumbent, the configuration will be queued again to\nbe intensified again.\n* “highest_budget”: Incumbent is selected only based on the absolute highest budget\navailable only.\nmax_incumbents\nint, defaults to 10\nHow many incumbents to keep track of in the case of multi-objective.",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.multi_fidelity_facade.html"
  },
  {
    "title": "smac.facade.random_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.random_facade.\nRandomFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nAbstractFacade\nFacade to use Random Online Aggressive Racing (ROAR).\nAggressive Racing:\nWhen we have a new configuration θ, we want to compare it to the current best\nconfiguration, the incumbent θ*. ROAR uses the ‘racing’ approach, where we run few times for unpromising θ and many\ntimes for promising configurations. Once we are confident enough that θ is better than θ*, we update the\nincumbent θ* ⟵ θ.\nAggressive\nmeans rejecting low-performing configurations very early, often after a single run.\nThis together is called\naggressive racing\n.\nROAR Loop:\nThe main ROAR loop looks as follows:\nSelect a configuration θ uniformly at random.\nCompare θ to incumbent θ* online (one θ at a time):\nReject/accept θ with\naggressive racing\nSetup:\nUses a random model and random search for the optimization of the acquisition function.\nNote\nThe surrogate model and the acquisition function is not used during the optimization and therefore replaced\nby dummies.\nstatic\nget_acquisition_function\n(\nscenario\n)\n[source]\n¶\nThe random facade is not using an acquisition function. Therefore, we simply return a dummy function.\nReturn type\n:\nAbstractAcquisitionFunction\nstatic\nget_acquisition_maximizer\n(\nscenario\n)\n[source]\n¶\nWe return\nRandomSearch\nas maximizer which samples configurations randomly from the configuration\nspace and therefore neither uses the acquisition function nor the model.\nReturn type\n:\nRandomSearch\nstatic\nget_initial_design\n(\nscenario\n,\n*\n,\nadditional_configs\n=\n[]\n)\n[source]\n¶\nReturns an initial design, which returns the default configuration.\nParameters\n:\nadditional_configs\n(\nlist\n[\nConfiguration\n]\n,\ndefaults to\n[\n]\n) – Adds additional configurations to the initial design.\nReturn type\n:\nDefaultInitialDesign\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\nmax_config_calls\n=\n3\n,\nmax_incumbents\n=\n10\n)\n[source]\n¶\nReturns\nIntensifier\nas intensifier.\nNote\nPlease use the\nHyperbandFacade\nif you want to incorporate budgets.\nWarning\nIf you are in an algorithm configuration setting, consider increasing\nmax_config_calls\n.\nParameters\n:\nmax_config_calls\n(\nint\n,\ndefaults to 3\n) – Maximum number of configuration evaluations. Basically, how many instance-seed keys should be max evaluated\nfor a configuration.\nmax_incumbents\n(\nint\n,\ndefaults to 10\n) – How many incumbents to keep track of in the case of multi-objective.\nReturn type\n:\nIntensifier\nstatic\nget_model\n(\nscenario\n)\n[source]\n¶\nThe model is used in the acquisition function. Since we do not use an acquisition function, we return a\ndummy model (returning random values in this case).\nReturn type\n:\nRandomModel\nstatic\nget_multi_objective_algorithm\n(\nscenario\n,\n*\n,\nobjective_weights\n=\nNone\n)\n[source]\n¶\nReturns the mean aggregation strategy for the multi-objective algorithm.\nParameters\n:\nscenario\n(\nScenario\n) –\nobjective_weights\n(\nlist\n[\nfloat\n]\n|\nNone\n,\ndefaults to None\n) – Weights for averaging the objectives in a weighted manner. Must be of the same length as the number of\nobjectives.\nReturn type\n:\nMeanAggregationStrategy\nstatic\nget_random_design\n(\nscenario\n)\n[source]\n¶\nJust like the acquisition function, we do not use a random design. Therefore, we return a dummy design.\nReturn type\n:\nAbstractRandomDesign\nstatic\nget_runhistory_encoder\n(\nscenario\n)\n[source]\n¶\nReturns the default runhistory encoder.\nReturn type\n:\nRunHistoryEncoder",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.random_facade.html"
  },
  {
    "title": "smac.facade.hyperparameter_optimization_facade — SMAC3 Documentation 2.0.0 documentation",
    "content": "Interfaces\n¶\nclass\nsmac.facade.hyperparameter_optimization_facade.\nHyperparameterOptimizationFacade\n(\nscenario\n,\ntarget_function\n,\n*\n,\nmodel\n=\nNone\n,\nacquisition_function\n=\nNone\n,\nacquisition_maximizer\n=\nNone\n,\ninitial_design\n=\nNone\n,\nrandom_design\n=\nNone\n,\nintensifier\n=\nNone\n,\nmulti_objective_algorithm\n=\nNone\n,\nrunhistory_encoder\n=\nNone\n,\nconfig_selector\n=\nNone\n,\nlogging_level\n=\nNone\n,\ncallbacks\n=\n[]\n,\noverwrite\n=\nFalse\n,\ndask_client\n=\nNone\n)\n[source]\n¶\nBases:\nAbstractFacade\nstatic\nget_acquisition_function\n(\nscenario\n,\n*\n,\nxi\n=\n0.0\n)\n[source]\n¶\nReturns an Expected Improvement acquisition function.\nParameters\n:\nscenario\n(\nScenario\n) –\nxi\n(\nfloat\n,\ndefaults to 0.0\n) – Controls the balance between exploration and exploitation of the\nacquisition function.\nReturn type\n:\nEI\nstatic\nget_acquisition_maximizer\n(\nscenario\n,\n*\n,\nchallengers\n=\n10000\n,\nlocal_search_iterations\n=\n10\n)\n[source]\n¶\nReturns local and sorted random search as acquisition maximizer.\nWarning\nIf you experience RAM issues, try to reduce the number of challengers.\nParameters\n:\nchallengers\n(\nint\n,\ndefaults to 10000\n) – Number of challengers.\nlocal_search_iterations\n(\nint\n,\ndefaults to 10\n) – Number of local search iterations.\nReturn type\n:\nLocalAndSortedRandomSearch\nstatic\nget_initial_design\n(\nscenario\n,\n*\n,\nn_configs\n=\nNone\n,\nn_configs_per_hyperparamter\n=\n10\n,\nmax_ratio\n=\n0.25\n,\nadditional_configs\n=\n[]\n)\n[source]\n¶\nReturns a Sobol design instance.\nParameters\n:\nscenario\n(\nScenario\n) –\nn_configs\n(\nint\n|\nNone\n,\ndefaults to None\n) – Number of initial configurations (disables the arguments\nn_configs_per_hyperparameter\n).\nn_configs_per_hyperparameter\n(\nint\n,\ndefaults to 10\n) – Number of initial configurations per hyperparameter. For example, if my configuration space covers five\nhyperparameters and\nn_configs_per_hyperparameter\nis set to 10, then 50 initial configurations will be\nsamples.\nmax_ratio\n(\nfloat\n,\ndefaults to 0.25\n) – Use at most\nscenario.n_trials\n*\nmax_ratio\nnumber of configurations in the initial design.\nAdditional configurations are not affected by this parameter.\nadditional_configs\n(\nlist\n[\nConfiguration\n]\n,\ndefaults to\n[\n]\n) – Adds additional configurations to the initial design.\nReturn type\n:\nSobolInitialDesign\nstatic\nget_intensifier\n(\nscenario\n,\n*\n,\nmax_config_calls\n=\n3\n,\nmax_incumbents\n=\n10\n)\n[source]\n¶\nReturns\nIntensifier\nas intensifier. Uses the default configuration for\nrace_against\n.\nParameters\n:\nscenario\n(\nScenario\n) –\nmax_config_calls\n(\nint\n,\ndefaults to 3\n) – Maximum number of configuration evaluations. Basically, how many instance-seed keys should be max evaluated\nfor a configuration.\nmax_incumbents\n(\nint\n,\ndefaults to 10\n) – How many incumbents to keep track of in the case of multi-objective.\nReturn type\n:\nIntensifier\nstatic\nget_model\n(\nscenario\n,\n*\n,\nn_trees\n=\n10\n,\nratio_features\n=\n1.0\n,\nmin_samples_split\n=\n2\n,\nmin_samples_leaf\n=\n1\n,\nmax_depth\n=\n1048576\n,\nbootstrapping\n=\nTrue\n)\n[source]\n¶\nReturns a random forest as surrogate model.\nParameters\n:\nn_trees\n(\nint\n,\ndefaults to 10\n) – The number of trees in the random forest.\nratio_features\n(\nfloat\n,\ndefaults to 5.0 / 6.0\n) – The ratio of features that are considered for splitting.\nmin_samples_split\n(\nint\n,\ndefaults to 3\n) – The minimum number of data points to perform a split.\nmin_samples_leaf\n(\nint\n,\ndefaults to 3\n) – The minimum number of data points in a leaf.\nmax_depth\n(\nint\n,\ndefaults to 20\n) – The maximum depth of a single tree.\nbootstrapping\n(\nbool\n,\ndefaults to True\n) – Enables bootstrapping.\nReturn type\n:\nRandomForest\nstatic\nget_multi_objective_algorithm\n(\nscenario\n,\n*\n,\nobjective_weights\n=\nNone\n)\n[source]\n¶\nReturns the mean aggregation strategy for the multi-objective algorithm.\nParameters\n:\nscenario\n(\nScenario\n) –\nobjective_weights\n(\nlist\n[\nfloat\n]\n|\nNone\n,\ndefaults to None\n) – Weights for averaging the objectives in a weighted manner. Must be of the same length as the number of\nobjectives.\nReturn type\n:\nMeanAggregationStrategy\nstatic\nget_random_design\n(\nscenario\n,\n*\n,\nprobability\n=\n0.2\n)\n[source]\n¶\nReturns\nProbabilityRandomDesign\nfor interleaving configurations.\nParameters\n:\nprobability\n(\nfloat\n,\ndefaults to 0.2\n) – Probability that a configuration will be drawn at random.\nReturn type\n:\nProbabilityRandomDesign\nstatic\nget_runhistory_encoder\n(\nscenario\n)\n[source]\n¶\nReturns a log scaled runhistory encoder. That means that costs are log scaled before\ntraining the surrogate model.\nReturn type\n:\nRunHistoryLogScaledEncoder",
    "url": "https://automl.github.io/SMAC3/v2.0.0/api/smac.facade.hyperparameter_optimization_facade.html"
  }
]