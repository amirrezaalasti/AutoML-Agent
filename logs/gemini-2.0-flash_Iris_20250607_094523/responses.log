[2025-06-07 09:45:29] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    C = Float("C", (1e-5, 10), log=True, default=1.0)
    gamma = Float("gamma", (1e-5, 10), log=True, default=0.1)
    degree = Integer("degree", (2, 5), default=3)

    # Add hyperparameters to the configuration space
    cs.add([kernel, C, gamma, degree])

    # Add forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(kernel, "linear"),
        ForbiddenEqualsClause(degree, 3)
    )

    cs.add_forbidden_clause(forbidden_clause)

    return cs
```
--------------------------------------------------------------------------------
[2025-06-07 09:45:29] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    C = Float("C", (1e-5, 10), log=True, default=1.0)
    gamma = Float("gamma", (1e-5, 10), log=True, default=0.1)
    degree = Integer("degree", (2, 5), default=3)

    # Add hyperparameters to the configuration space
    cs.add([kernel, C, gamma, degree])

    # Add forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(kernel, "linear"),
        ForbiddenEqualsClause(degree, 3)
    )

    cs.add_forbidden_clause(forbidden_clause)

    return cs

--------------------------------------------------------------------------------
[2025-06-07 09:45:29] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-06-07 09:45:30] [Metadata: {'component': 'scenario'}] ```python
import logging
from smac.scenario import Scenario
from ConfigSpace import ConfigurationSpace


def generate_scenario(cs):
    return Scenario(
        configspace=cs,
        name="gemini-2.0-flashiris20250607_094529",
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=9,
        objectives=['loss'],
        n_trials=10,
        seed=12345,

    )
```
--------------------------------------------------------------------------------
[2025-06-07 09:45:30] [Metadata: {'component': 'scenario', 'action': 'run'}] import logging
from smac.scenario import Scenario
from ConfigSpace import ConfigurationSpace


def generate_scenario(cs):
    return Scenario(
        configspace=cs,
        name="gemini-2.0-flashiris20250607_094529",
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=9,
        objectives=['loss'],
        n_trials=10,
        seed=12345,

    )

--------------------------------------------------------------------------------
[2025-06-07 09:45:30] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
[2025-06-07 09:45:33] [Metadata: {'component': 'train_function'}] ```python
from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import log_loss


def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains an SVM model on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): The configuration object containing hyperparameters.
        dataset (Any): A dictionary containing the dataset with 'X' for features and 'y' for labels.
        seed (int): The random seed for reproducibility.

    Returns:
        float: The average training loss over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)

    # Extract hyperparameters from the configuration
    kernel = cfg.get("kernel")
    C = cfg.get("C")
    gamma = cfg.get("gamma")
    degree = cfg.get("degree")

    # Initialize and train the SVM model
    model = SVC(
        kernel=kernel,
        C=C,
        gamma=gamma,
        degree=degree,
        random_state=seed,
        probability=True  # Required for log_loss
    )

    # Perform multiple epochs and calculate training loss
    num_epochs = 10
    epoch_losses = []
    for _ in range(num_epochs):
        model.fit(X_train, y_train)
        y_pred_proba = model.predict_proba(X_train)  # Probabilities for log loss
        loss = log_loss(y_train, y_pred_proba)  # Use log loss for multi-class classification
        epoch_losses.append(loss)

    # Calculate the average training loss
    loss = np.mean(epoch_losses)

    return loss
```
--------------------------------------------------------------------------------
[2025-06-07 09:45:33] [Metadata: {'component': 'train_function', 'action': 'run'}] from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import log_loss


def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains an SVM model on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): The configuration object containing hyperparameters.
        dataset (Any): A dictionary containing the dataset with 'X' for features and 'y' for labels.
        seed (int): The random seed for reproducibility.

    Returns:
        float: The average training loss over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)

    # Extract hyperparameters from the configuration
    kernel = cfg.get("kernel")
    C = cfg.get("C")
    gamma = cfg.get("gamma")
    degree = cfg.get("degree")

    # Initialize and train the SVM model
    model = SVC(
        kernel=kernel,
        C=C,
        gamma=gamma,
        degree=degree,
        random_state=seed,
        probability=True  # Required for log_loss
    )

    # Perform multiple epochs and calculate training loss
    num_epochs = 10
    epoch_losses = []
    for _ in range(num_epochs):
        model.fit(X_train, y_train)
        y_pred_proba = model.predict_proba(X_train)  # Probabilities for log loss
        loss = log_loss(y_train, y_pred_proba)  # Use log loss for multi-class classification
        epoch_losses.append(loss)

    # Calculate the average training loss
    loss = np.mean(epoch_losses)

    return loss

--------------------------------------------------------------------------------
[2025-06-07 09:45:33] [Metadata: {'component': 'train_function', 'status': 'success', 'loss': 0.8846395797687696}] Training executed successfully, loss: 0.8846395797687696
--------------------------------------------------------------------------------
