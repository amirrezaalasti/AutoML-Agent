[2025-05-20 12:14:46] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", bounds=(1, 2), default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Add conditions
    # cond_knn = EqualsCondition(knn_n_neighbors, classifier, "knn")
    # cond_svm = EqualsCondition(svm_kernel, classifier, "svm")
    # cond_dt = EqualsCondition(dt_criterion, classifier, "dt")

    # Add forbidden clauses

    # Example 1: If classifier is KNN, SVM parameters are irrelevant and should be forbidden
    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(svm_kernel, "rbf")
    )
    
    # Example 2: If classifier is SVM, DT parameters are irrelevant and should be forbidden
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenEqualsClause(dt_criterion, "gini")
    )

    # Example 3: If classifier is DT, KNN parameters are irrelevant and should be forbidden
    forbidden_dt = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "dt"),
        ForbiddenEqualsClause(knn_n_neighbors, 5)
    )

    cs.add_forbidden_clauses([forbidden_knn, forbidden_svm, forbidden_dt])

    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:46] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", bounds=(1, 2), default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Add conditions
    # cond_knn = EqualsCondition(knn_n_neighbors, classifier, "knn")
    # cond_svm = EqualsCondition(svm_kernel, classifier, "svm")
    # cond_dt = EqualsCondition(dt_criterion, classifier, "dt")

    # Add forbidden clauses

    # Example 1: If classifier is KNN, SVM parameters are irrelevant and should be forbidden
    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(svm_kernel, "rbf")
    )
    
    # Example 2: If classifier is SVM, DT parameters are irrelevant and should be forbidden
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenEqualsClause(dt_criterion, "gini")
    )

    # Example 3: If classifier is DT, KNN parameters are irrelevant and should be forbidden
    forbidden_dt = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "dt"),
        ForbiddenEqualsClause(knn_n_neighbors, 5)
    )

    cs.add_forbidden_clauses([forbidden_knn, forbidden_svm, forbidden_dt])

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:14:46] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#1): Given vector violates forbidden clause: (Forbidden: classifier == 'knn' && Forbidden: svm_kernel == 'rbf')
--------------------------------------------------------------------------------
[2025-05-20 12:14:49] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, ForbiddenInClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", bounds=(1, 2), default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])


    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenInClause(svm_kernel, ["linear", "rbf", "poly", "sigmoid"])
    )
    
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenInClause(dt_criterion, ["gini", "entropy"])
    )

    forbidden_dt = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "dt"),
        ForbiddenInClause(knn_n_neighbors, list(range(1, 11)))
    )

    cs.add_forbidden_clauses([forbidden_knn, forbidden_svm, forbidden_dt])

    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:49] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, ForbiddenInClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", bounds=(1, 2), default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])


    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenInClause(svm_kernel, ["linear", "rbf", "poly", "sigmoid"])
    )
    
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenInClause(dt_criterion, ["gini", "entropy"])
    )

    forbidden_dt = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "dt"),
        ForbiddenInClause(knn_n_neighbors, list(range(1, 11)))
    )

    cs.add_forbidden_clauses([forbidden_knn, forbidden_svm, forbidden_dt])

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:14:49] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#2): Given vector violates forbidden clause: (Forbidden: classifier == 'knn' && Forbidden: svm_kernel in {'linear', 'rbf', 'poly', 'sigmoid'})
--------------------------------------------------------------------------------
[2025-05-20 12:14:52] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5, condition=ForbiddenEqualsClause(classifier, "knn"))
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform", condition=ForbiddenEqualsClause(classifier, "knn"))
    knn_p = Integer("knn_p", bounds=(1, 2), default=2, condition=ForbiddenEqualsClause(classifier, "knn"))

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf", condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True, condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True, condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3, condition=ForbiddenEqualsClause(classifier, "svm"))

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini", condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5, condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2, condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1, condition=ForbiddenEqualsClause(classifier, "dt"))

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:52] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"])

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", bounds=(1, 10), default=5, condition=ForbiddenEqualsClause(classifier, "knn"))
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform", condition=ForbiddenEqualsClause(classifier, "knn"))
    knn_p = Integer("knn_p", bounds=(1, 2), default=2, condition=ForbiddenEqualsClause(classifier, "knn"))

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf", condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True, condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True, condition=ForbiddenEqualsClause(classifier, "svm"))
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3, condition=ForbiddenEqualsClause(classifier, "svm"))

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini", condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_max_depth = Integer("dt_max_depth", bounds=(1, 20), default=5, condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_min_samples_split = Integer("dt_min_samples_split", bounds=(2, 20), default=2, condition=ForbiddenEqualsClause(classifier, "dt"))
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", bounds=(1, 20), default=1, condition=ForbiddenEqualsClause(classifier, "dt"))

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:14:52] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#3): Integer() got an unexpected keyword argument 'condition'
--------------------------------------------------------------------------------
[2025-05-20 12:14:56] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, OrConjunction

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"], default="knn")

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", lower=1, upper=10, default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", lower=1, upper=2, default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", lower=1e-5, upper=10, default=1.0, log=True)
    svm_gamma = Float("svm_gamma", lower=1e-5, upper=10, default=0.1, log=True)
    svm_degree = Integer("svm_degree", lower=2, upper=5, default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", lower=1, upper=20, default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", lower=2, upper=20, default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", lower=1, upper=20, default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Define conditions
    knn_cond = ForbiddenEqualsClause(classifier, "knn")
    svm_cond = ForbiddenEqualsClause(classifier, "svm")
    dt_cond = ForbiddenEqualsClause(classifier, "dt")
    
    cs.add_condition(OrConjunction(knn_cond, svm_cond, dt_cond))

    # Define forbidden clauses
    forbidden_knn_svm = ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(svm_kernel, "rbf")
        )
    cs.add_forbidden_clause(forbidden_knn_svm)
    
    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:56] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, OrConjunction

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"], default="knn")

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", lower=1, upper=10, default=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", lower=1, upper=2, default=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", lower=1e-5, upper=10, default=1.0, log=True)
    svm_gamma = Float("svm_gamma", lower=1e-5, upper=10, default=0.1, log=True)
    svm_degree = Integer("svm_degree", lower=2, upper=5, default=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", lower=1, upper=20, default=5)
    dt_min_samples_split = Integer("dt_min_samples_split", lower=2, upper=20, default=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", lower=1, upper=20, default=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Define conditions
    knn_cond = ForbiddenEqualsClause(classifier, "knn")
    svm_cond = ForbiddenEqualsClause(classifier, "svm")
    dt_cond = ForbiddenEqualsClause(classifier, "dt")
    
    cs.add_condition(OrConjunction(knn_cond, svm_cond, dt_cond))

    # Define forbidden clauses
    forbidden_knn_svm = ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(svm_kernel, "rbf")
        )
    cs.add_forbidden_clause(forbidden_knn_svm)
    
    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:14:56] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#4): Integer() got an unexpected keyword argument 'lower'
--------------------------------------------------------------------------------
[2025-05-20 12:15:00] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, OrConjunction, InCondition

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"], default="knn")

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", 1, 10, default_value=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", 1, 2, default_value=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", 1e-5, 10, default_value=1.0, log=True)
    svm_gamma = Float("svm_gamma", 1e-5, 10, default_value=0.1, log=True)
    svm_degree = Integer("svm_degree", 2, 5, default_value=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", 1, 20, default_value=5)
    dt_min_samples_split = Integer("dt_min_samples_split", 2, 20, default_value=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", 1, 20, default_value=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Define conditions
    knn_n_neighbors_cond = InCondition(child=knn_n_neighbors, parent=classifier, values=['knn'])
    knn_weights_cond = InCondition(child=knn_weights, parent=classifier, values=['knn'])
    knn_p_cond = InCondition(child=knn_p, parent=classifier, values=['knn'])

    svm_kernel_cond = InCondition(child=svm_kernel, parent=classifier, values=['svm'])
    svm_C_cond = InCondition(child=svm_C, parent=classifier, values=['svm'])
    svm_gamma_cond = InCondition(child=svm_gamma, parent=classifier, values=['svm'])
    svm_degree_cond = InCondition(child=svm_degree, parent=classifier, values=['svm'])

    dt_criterion_cond = InCondition(child=dt_criterion, parent=classifier, values=['dt'])
    dt_max_depth_cond = InCondition(child=dt_max_depth, parent=classifier, values=['dt'])
    dt_min_samples_split_cond = InCondition(child=dt_min_samples_split, parent=classifier, values=['dt'])
    dt_min_samples_leaf_cond = InCondition(child=dt_min_samples_leaf, parent=classifier, values=['dt'])

    cs.add_conditions([knn_n_neighbors_cond, knn_weights_cond, knn_p_cond,
                       svm_kernel_cond, svm_C_cond, svm_gamma_cond, svm_degree_cond,
                       dt_criterion_cond, dt_max_depth_cond, dt_min_samples_split_cond, dt_min_samples_leaf_cond])
    
    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:15:00] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause, OrConjunction, InCondition

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "dt"], default="knn")

    # KNN parameters
    knn_n_neighbors = Integer("knn_n_neighbors", 1, 10, default_value=5)
    knn_weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    knn_p = Integer("knn_p", 1, 2, default_value=2)

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", 1e-5, 10, default_value=1.0, log=True)
    svm_gamma = Float("svm_gamma", 1e-5, 10, default_value=0.1, log=True)
    svm_degree = Integer("svm_degree", 2, 5, default_value=3)

    # Decision Tree parameters
    dt_criterion = Categorical("dt_criterion", ["gini", "entropy"], default="gini")
    dt_max_depth = Integer("dt_max_depth", 1, 20, default_value=5)
    dt_min_samples_split = Integer("dt_min_samples_split", 2, 20, default_value=2)
    dt_min_samples_leaf = Integer("dt_min_samples_leaf", 1, 20, default_value=1)

    # Add hyperparameters to the configuration space
    cs.add_hyperparameters([classifier, knn_n_neighbors, knn_weights, knn_p,
                             svm_kernel, svm_C, svm_gamma, svm_degree,
                             dt_criterion, dt_max_depth, dt_min_samples_split, dt_min_samples_leaf])

    # Define conditions
    knn_n_neighbors_cond = InCondition(child=knn_n_neighbors, parent=classifier, values=['knn'])
    knn_weights_cond = InCondition(child=knn_weights, parent=classifier, values=['knn'])
    knn_p_cond = InCondition(child=knn_p, parent=classifier, values=['knn'])

    svm_kernel_cond = InCondition(child=svm_kernel, parent=classifier, values=['svm'])
    svm_C_cond = InCondition(child=svm_C, parent=classifier, values=['svm'])
    svm_gamma_cond = InCondition(child=svm_gamma, parent=classifier, values=['svm'])
    svm_degree_cond = InCondition(child=svm_degree, parent=classifier, values=['svm'])

    dt_criterion_cond = InCondition(child=dt_criterion, parent=classifier, values=['dt'])
    dt_max_depth_cond = InCondition(child=dt_max_depth, parent=classifier, values=['dt'])
    dt_min_samples_split_cond = InCondition(child=dt_min_samples_split, parent=classifier, values=['dt'])
    dt_min_samples_leaf_cond = InCondition(child=dt_min_samples_leaf, parent=classifier, values=['dt'])

    cs.add_conditions([knn_n_neighbors_cond, knn_weights_cond, knn_p_cond,
                       svm_kernel_cond, svm_C_cond, svm_gamma_cond, svm_degree_cond,
                       dt_criterion_cond, dt_max_depth_cond, dt_min_samples_split_cond, dt_min_samples_leaf_cond])
    
    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:15:00] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#5): Integer() got an unexpected keyword argument 'default_value'
--------------------------------------------------------------------------------
[2025-05-20 12:15:03] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
)


def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["LogisticRegression", "RandomForest", "SVC"], default="LogisticRegression"
    )
    cs.add_hyperparameter(classifier)

    # Logistic Regression hyperparameters
    lr_penalty = Categorical("lr_penalty", ["l1", "l2"], default="l2")
    lr_C = Float("lr_C", (1e-5, 10), default=1.0, log=True)
    lr_solver = Categorical("lr_solver", ["liblinear", "saga"], default="liblinear")
    cs.add_hyperparameters([lr_penalty, lr_C, lr_solver])

    # Random Forest hyperparameters
    rf_n_estimators = Integer("rf_n_estimators", (10, 200), default=100)
    rf_max_depth = Integer("rf_max_depth", (2, 10), default=None)
    cs.add_hyperparameters([rf_n_estimators, rf_max_depth])

    # SVC hyperparameters
    svc_C = Float("svc_C", (1e-5, 10), default=1.0, log=True)
    svc_kernel = Categorical("svc_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svc_gamma = Float("svc_gamma", (1e-5, 10), default=1.0, log=True)
    cs.add_hyperparameters([svc_C, svc_kernel, svc_gamma])

    # Add forbidden clauses
    forbidden_penalty_solver = ForbiddenAndConjunction(
        ForbiddenEqualsClause(lr_penalty, "l1"), ForbiddenEqualsClause(lr_solver, "liblinear")
    )
    cs.add_forbidden_clause(forbidden_penalty_solver)

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:15:03] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-05-20 12:15:04] [Metadata: {'component': 'scenario'}] ```python
from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        objectives="validation_loss",
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=10,
        n_workers=2
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-05-20 12:15:04] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        objectives="validation_loss",
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=10,
        n_workers=2
    )
    return scenario

--------------------------------------------------------------------------------
[2025-05-20 12:15:04] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
[2025-05-20 12:15:06] [Metadata: {'component': 'train_function'}] ```python
from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score

def train(cfg: Configuration, dataset: Any) -> float:
    """Trains a model based on the provided configuration and dataset.

    Args:
        cfg (Configuration): A ConfigurationSpace object representing the hyperparameter settings.
        dataset (Any): A dictionary containing the training data and labels ('X' and 'y').

    Returns:
        float: The average training loss over 10 epochs (cross-validation).
    """

    X = dataset['X']
    y = dataset['y']

    classifier_name = cfg.get("classifier")

    if classifier_name == "LogisticRegression":
        penalty = cfg.get("lr_penalty")
        C = cfg.get("lr_C")
        solver = cfg.get("lr_solver")
        model = LogisticRegression(penalty=penalty, C=C, solver=solver, multi_class='auto', max_iter=1000)
    elif classifier_name == "RandomForest":
        n_estimators = cfg.get("rf_n_estimators")
        max_depth = cfg.get("rf_max_depth")
        model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)
    elif classifier_name == "SVC":
        C = cfg.get("svc_C")
        kernel = cfg.get("svc_kernel")
        gamma = cfg.get("svc_gamma")
        model = SVC(C=C, kernel=kernel, gamma=gamma, probability=True)
    else:
        raise ValueError(f"Unknown classifier: {classifier_name}")

    # Perform cross-validation to estimate the loss (using negative mean squared error as a proxy)
    scores = cross_val_score(model, X, y, cv=10, scoring='neg_mean_squared_error')
    loss = -scores.mean()  # Convert negative MSE to positive loss

    return float(loss)
```
--------------------------------------------------------------------------------
[2025-05-20 12:15:06] [Metadata: {'component': 'train_function', 'action': 'run'}] from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score

def train(cfg: Configuration, dataset: Any) -> float:
    """Trains a model based on the provided configuration and dataset.

    Args:
        cfg (Configuration): A ConfigurationSpace object representing the hyperparameter settings.
        dataset (Any): A dictionary containing the training data and labels ('X' and 'y').

    Returns:
        float: The average training loss over 10 epochs (cross-validation).
    """

    X = dataset['X']
    y = dataset['y']

    classifier_name = cfg.get("classifier")

    if classifier_name == "LogisticRegression":
        penalty = cfg.get("lr_penalty")
        C = cfg.get("lr_C")
        solver = cfg.get("lr_solver")
        model = LogisticRegression(penalty=penalty, C=C, solver=solver, multi_class='auto', max_iter=1000)
    elif classifier_name == "RandomForest":
        n_estimators = cfg.get("rf_n_estimators")
        max_depth = cfg.get("rf_max_depth")
        model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)
    elif classifier_name == "SVC":
        C = cfg.get("svc_C")
        kernel = cfg.get("svc_kernel")
        gamma = cfg.get("svc_gamma")
        model = SVC(C=C, kernel=kernel, gamma=gamma, probability=True)
    else:
        raise ValueError(f"Unknown classifier: {classifier_name}")

    # Perform cross-validation to estimate the loss (using negative mean squared error as a proxy)
    scores = cross_val_score(model, X, y, cv=10, scoring='neg_mean_squared_error')
    loss = -scores.mean()  # Convert negative MSE to positive loss

    return float(loss)

--------------------------------------------------------------------------------
[2025-05-20 12:15:06] [Metadata: {'component': 'train_function', 'status': 'success', 'loss': 1.3666666666666667}] Training executed successfully, loss: 1.3666666666666667
--------------------------------------------------------------------------------
