[2025-05-20 12:19:10] [Metadata: {'component': 'config'}] **TASK**

Goal: Write a Python function called `get_configspace()` that returns a valid `ConfigurationSpace` for a classification task.

---

**STRICT OUTPUT RULES**

* Output only the `get_configspace()` function and necessary imports.
* Do not include any extra text, explanations, or comments.
* Code must be syntactically correct, executable, and compatible with SMAC.

---

**ALLOWED CLASSES**

**Core Classes**

* `ConfigurationSpace`
* `Categorical`
* `Float`
* `Integer`
* `Constant`

**Conditions**

* `EqualsCondition`
* `InCondition`
* `OrConjunction`

**Forbidden Clauses**

* `ForbiddenEqualsClause`
* `ForbiddenAndConjunction`

**Distributions (only if needed)**

* `Beta`
* `Normal`

**Serialization (only if needed)**

* `to_yaml()`
* `from_yaml()`

---

**ALLOWED OPTIONS**

* `default`
* `log`
* `distribution`
* `seed`

---

**CONSTRAINTS**

* Must include **at least one** `ForbiddenAndConjunction` to block invalid combinations.

---

**CONFIGURATION SPACE REQUIREMENTS**

* Initialize `ConfigurationSpace` with `seed=1234`.

---

**DATASET DESCRIPTION**

* The configuration space must be based on the following information
This is a tabular dataset.
It has 150 samples and 4 features.
Feature columns and types:
- 0: float64
- 1: float64
- 2: float64
- 3: float64

Feature statistical summary:
                0           1           2           3
count  150.000000  150.000000  150.000000  150.000000
mean     5.843333    3.057333    3.758000    1.199333
std      0.828066    0.435866    1.765298    0.762238
min      4.300000    2.000000    1.000000    0.100000
25%      5.100000    2.800000    1.600000    0.300000
50%      5.800000    3.000000    4.350000    1.300000
75%      6.400000    3.300000    5.100000    1.800000
max      7.900000    4.400000    6.900000    2.500000

Label distribution:
0    50
1    50
2    50
Name: count, dtype: int64.
* Hyperparameters and model choices must reflect what is appropriate for that dataset type.

---

**IMPORTANT RULE**

* Do **not** use any classes, functions, methods, or modules outside of the **ALLOWED CLASSES**.

[EXAMPLES]

# Example 1: Basic ConfigurationSpace
```python
from ConfigSpace import ConfigurationSpace

cs = ConfigurationSpace(
    space={
        "C": (-1.0, 1.0),
        "max_iter": (10, 100),
    },
    seed=1234,
)
```
# Example 2: Adding Hyperparameters
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer

kernel_type = Categorical('kernel_type', ['linear', 'poly', 'rbf', 'sigmoid'])
degree = Integer('degree', bounds=(2, 4), default=2)
coef0 = Float('coef0', bounds=(0, 1), default=0.0)
gamma = Float('gamma', bounds=(1e-5, 1e2), default=1, log=True)

cs = ConfigurationSpace()
cs.add([kernel_type, degree, coef0, gamma])
```
# Example 3: Adding Conditions
```python
from ConfigSpace import EqualsCondition, InCondition, OrConjunction

cond_1 = EqualsCondition(degree, kernel_type, 'poly')
cond_2 = OrConjunction(
    EqualsCondition(coef0, kernel_type, 'poly'),
    EqualsCondition(coef0, kernel_type, 'sigmoid')
)
cond_3 = InCondition(gamma, kernel_type, ['rbf', 'poly', 'sigmoid'])
```
# Example 4: Adding Forbidden Clauses
```pyhon
from ConfigSpace import ForbiddenEqualsClause, ForbiddenAndConjunction

penalty_and_loss = ForbiddenAndConjunction(
    ForbiddenEqualsClause(penalty, "l1"),
    ForbiddenEqualsClause(loss, "hinge")
)
constant_penalty_and_loss = ForbiddenAndConjunction(
    ForbiddenEqualsClause(dual, "False"),
    ForbiddenEqualsClause(penalty, "l2"),
    ForbiddenEqualsClause(loss, "hinge")
)
penalty_and_dual = ForbiddenAndConjunction(
    ForbiddenEqualsClause(dual, "False"),
    ForbiddenEqualsClause(penalty, "l1")
)
```
Example 5: Serialization
```python
from pathlib import Path
from ConfigSpace import ConfigurationSpace

path = Path("configspace.yaml")
cs = ConfigurationSpace(
    space={
        "C": (-1.0, 1.0),
        "max_iter": (10, 100),
    },
    seed=1234,
)
cs.to_yaml(path)
loaded_cs = ConfigurationSpace.from_yaml(path)
```
# Example 6: Priors
```python
import numpy as np
from ConfigSpace import ConfigurationSpace, Float, Categorical, Beta, Normal

cs = ConfigurationSpace(
    space={
        "lr": Float(
            'lr',
            bounds=(1e-5, 1e-1),
            default=1e-3,
            log=True,
            distribution=Normal(1e-3, 1e-1)
        ),
        "dropout": Float(
            'dropout',
            bounds=(0, 0.99),
            default=0.25,
            distribution=Beta(alpha=2, beta=4)
        ),
        "activation": Categorical(
            'activation',
            items=['tanh', 'relu'],
            weights=[0.2, 0.8]
        ),
    },
    seed=1234,
)
```

--------------------------------------------------------------------------------
[2025-05-20 12:19:10] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-05-20 12:19:11] [Metadata: {'component': 'scenario'}] ---

**Objective:**
Generate a **Python function** named `generate_scenario(cs)` that returns a valid `Scenario` object configured for SMAC (v2.0+), strictly following the rules below.

---

**Output Format Rules (Strict):**

* Output **only** the function `generate_scenario(cs)` and the **necessary import statements**.
* Use **Python 3.10 syntax** but **do not** include type annotations for the function or parameters.
* The code must be **fully executable** with the latest **SMAC v2.0+** version.
* Output **only valid Python code** â€“ **no comments**, **no explanations**, **no extra text**, and **no example usage**.
* The function must be **self-contained**.

---

**Functional Requirements:**

* The input `cs` is a `ConfigurationSpace` object.
* Return a `Scenario` configured with the following:
  * `output_directory`: `"./automl_results"`
  * `deterministic`: `False` (enable variability)
  * `n_workers`: greater than 1 (to enable parallel optimization)
  * `min_budget` and `max_budget`: set appropriately for multi-fidelity tuning (e.g., training epochs)
---

**Reminder:** The output must be limited to:

* Valid `import` statements
* A single `generate_scenario(cs)` function that returns a properly configured `Scenario` object
* Do not use any parameters other than the ones explicitly listed in this prompt.

---

**Example (Correct Output Format):**

```python
from smac import Scenario
from ConfigSpace import Configuration

def generate_scenario(cs: Configuration):
    scenario = Scenario(
        configspace=cs,
        objectives="validation_loss",
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=100,
        n_workers=4
    )
    return scenario
```

--------------------------------------------------------------------------------
[2025-05-20 12:19:11] [Metadata: {'component': 'scenario', 'action': 'run'}] Running scenario code:
--------------------------------------------------------------------------------
[2025-05-20 12:19:14] [Metadata: {'component': 'train_function'}] **Generate production-grade Python code for a machine learning training function with the following STRICT requirements:**

---

### **Function signature** must be:

```python
from ConfigSpace import Configuration
def train(cfg: Configuration, dataset: Any) -> float:
```

---

### **Function Behavior Requirements:**

* The function **must accept** a `dataset` dictionary with:

  * `dataset['X']`: feature matrix or input tensor
  * `dataset['y']`: label vector or label tensor

* Assume `cfg` is a sampled configuration object:

  * Access primitive values using `cfg.get('key')` (only `int`, `float`, `str`, etc.).
  * **Do not access or manipulate non-primitive hyperparameter objects**.

* The function must return the **average training loss** over 10 epochs.

* You must carefully read and follow the dataset description provided, which includes:
  * Data format and dimensions
  * Required preprocessing steps
  * Special handling requirements
  * Framework-specific considerations

```python
return loss  # float
```

* Lower `loss` means a better model.

---

### **Frameworks**

You may choose **PyTorch**, **TensorFlow**, or **scikit-learn**, depending on the dataset and supporting code provided.

---

### **Model Requirements**

* Infer input and output dimensions dynamically from the dataset
* Follow the data format requirements specified in the dataset description
* Handle any necessary data transformations as described in the dataset description

---

### **Supporting Code Provided:**

* ConfigSpace definition: `from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "random_forest"], default="knn")
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", bounds=(1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    p = Categorical("p", [1, 2], default=2)
    cs.add_hyperparameters([n_neighbors, weights, p])

    # SVM parameters
    C = Float("C", bounds=(1e-5, 10), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    degree = Integer("degree", bounds=(2, 5), default=3)
    gamma = Categorical("gamma", ["scale", "auto"], default="scale")
    cs.add_hyperparameters([C, kernel, degree, gamma])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", bounds=(10, 200), default=100)
    max_depth = Integer("max_depth", bounds=(2, 10), default=None)
    min_samples_split = Integer("min_samples_split", bounds=(2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", bounds=(1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])


    # Add forbidden clauses
    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(kernel, "linear")
    )

    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenEqualsClause(n_neighbors, 5)
    )

    forbidden_rf = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "random_forest"),
        ForbiddenEqualsClause(kernel, "rbf")
    )

    cs.add_forbidden_clause(forbidden_knn)
    cs.add_forbidden_clause(forbidden_svm)
    cs.add_forbidden_clause(forbidden_rf)

    return cs
`
* SMAC scenario: `from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=10,
        n_workers=4
    )
    return scenario
`
* Dataset description: `This is a tabular dataset.
It has 150 samples and 4 features.
Feature columns and types:
- 0: float64
- 1: float64
- 2: float64
- 3: float64

Feature statistical summary:
                0           1           2           3
count  150.000000  150.000000  150.000000  150.000000
mean     5.843333    3.057333    3.758000    1.199333
std      0.828066    0.435866    1.765298    0.762238
min      4.300000    2.000000    1.000000    0.100000
25%      5.100000    2.800000    1.600000    0.300000
50%      5.800000    3.000000    4.350000    1.300000
75%      6.400000    3.300000    5.100000    1.800000
max      7.900000    4.400000    6.900000    2.500000

Label distribution:
0    50
1    50
2    50
Name: count, dtype: int64`

---

### **Additional Instructions**

* The code must not hardcode dataset dimensions
* The function must be runnable and not assume unavailable classes or modules
* You must only output the `def train(...)` function and nothing else
* Always check dataset description for format hints and requirements before processing

--------------------------------------------------------------------------------
[2025-05-20 12:19:14] [Metadata: {'component': 'train_function', 'action': 'run'}] Running train_function code:
--------------------------------------------------------------------------------
