Configuration space code:
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, Constant, EqualsCondition, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    learning_rate = Categorical("learning_rate", ["adaptive", "constant"], default="adaptive")
    alpha = Float("alpha", (1e-6, 1e-1), log=True, default=1e-2)
    max_iter = Integer("max_iter", (100, 1000), default=500)
    eta0 = Float("eta0", (1e-4, 1.0), log=True, default=1e-2)
    early_stopping = Categorical("early_stopping", [True, False], default=True)

    cs.add([learning_rate, alpha, max_iter, early_stopping, eta0])

    cs.add_condition(EqualsCondition(eta0, learning_rate, "constant"))

    penalty_and_loss = ForbiddenAndConjunction(
        ForbiddenEqualsClause(learning_rate, "adaptive"),
        ForbiddenEqualsClause(eta0, 0.01)
    )
    cs.add_forbidden(penalty_and_loss)

    return cs

Error occurred: 'ConfigurationSpace' object has no attribute 'add_forbidden'
Configuration space code:
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, Constant, EqualsCondition, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    learning_rate = Categorical("learning_rate", ["adaptive", "constant"], default="adaptive")
    alpha = Float("alpha", (1e-6,1e-1), log=True, default=1e-2)
    max_iter = Integer("max_iter", (100,1000), default=500)
    eta0 = Float("eta0", (1e-4,1.0), log=True, default=1e-2)
    early_stopping = Categorical("early_stopping", [True, False], default=True)

    cs.add([learning_rate, alpha, max_iter, early_stopping, eta0])

    cs.add_condition(EqualsCondition(eta0, learning_rate, "constant"))

    penalty_and_loss = ForbiddenAndConjunction(
        ForbiddenEqualsClause(learning_rate, "adaptive"),
        ForbiddenEqualsClause(eta0,0.01)
    )
    cs.add_forbidden_clause(penalty_and_loss)

    return cs

Generated configuration space:
Configuration space object:
  Hyperparameters:
    alpha, Type: UniformFloat, Range: [1e-06, 0.1], Default: 0.01, on log-scale
    early_stopping, Type: Categorical, Choices: {True, False}, Default: True
    eta0, Type: UniformFloat, Range: [0.0001, 1.0], Default: 0.01, on log-scale
    learning_rate, Type: Categorical, Choices: {adaptive, constant}, Default: adaptive
    max_iter, Type: UniformInteger, Range: [100, 1000], Default: 500
  Conditions:
    eta0 | learning_rate == 'constant'
  Forbidden Clauses:
    (Forbidden: learning_rate == 'adaptive' && Forbidden: eta0 == 0.01)

Scenario code:
from smac import Scenario

def generate_scenario(cs):
    scenario = Scenario({
        "run_obj": "quality",
        "output_dir": "./automl_results",
        "shared_model": False,
        "multi_objectives": ["validation_loss"],
        "overall_obj": "validation_loss",
        "deterministic": False,
        "wallclock_limit": 3600.0,
        "abort_on_first_run_crash": True,
        "limit_resources": True,
        "memory_limit": 16000.0,
        "cutoff": 300.0,
        "ta_run_limit": 100,
        "intens_min_chall": 1,
        "intens_adaptive_capping_slackfactor": 1.5,
        "rf_num_trees": 10,
        "rf_max_depth": 5,
        "rf_min_samples_leaf": 1,
        "rf_min_samples_split": 2,
        "rf_ratio_features": 0.5,
        "save_results_instantly": True,
    })
    return scenario

Generated scenario: Scenario(configspace={'run_obj': 'quality', 'output_dir': './automl_results', 'shared_model': False, 'multi_objectives': ['validation_loss'], 'overall_obj': 'validation_loss', 'deterministic': False, 'wallclock_limit': 3600.0, 'abort_on_first_run_crash': True, 'limit_resources': True, 'memory_limit': 16000.0, 'cutoff': 300.0, 'ta_run_limit': 100, 'intens_min_chall': 1, 'intens_adaptive_capping_slackfactor': 1.5, 'rf_num_trees': 10, 'rf_max_depth': 5, 'rf_min_samples_leaf': 1, 'rf_min_samples_split': 2, 'rf_ratio_features': 0.5, 'save_results_instantly': True}, name=None, output_directory=PosixPath('smac3_output'), deterministic=False, objectives='cost', crash_cost=inf, termination_cost_threshold=inf, walltime_limit=inf, cputime_limit=inf, trial_walltime_limit=None, trial_memory_limit=None, n_trials=100, use_default_config=False, instances=None, instance_features=None, min_budget=None, max_budget=None, seed=0, n_workers=1)
Generated training function code:
Here's the Python code that meets the specified requirements:

```python
from typing import Any
from ConfigSpace import Configuration
from sklearn.model_selection import StratifiedKFold, cross_val_score
from sklearn.linear_model import SGDClassifier
import numpy as np

def train(cfg: Configuration, seed: int, dataset: Any) -> float:
    """
    Train a SGDClassifier model on the given dataset with the specified configuration.

    Args:
    - cfg (Configuration): A sampled configuration object.
    - seed (int): The random seed for reproducibility.
    - dataset (Any): A dataset object with 'X' and 'y' attributes.

    Returns:
    - float: The loss value (1.0 - mean cross-validation accuracy).
    """

    # Extract dataset
    X, y = dataset['X'], dataset['y']

    # Extract hyperparameters
    learning_rate: str = cfg.get('learning_rate')
    alpha: float = cfg.get('alpha')
    max_iter: int = cfg.get('max_iter')
    eta0: float = cfg.get('eta0') if learning_rate == 'constant' else 0.1

    # Define model parameters
    params = {
        'loss': 'log_loss',
        'penalty': 'l2',
        'alpha': alpha,
        'max_iter': max_iter,
        'warm_start': True,
        'random_state': seed,
        'learning_rate': learning_rate,
        'eta0': eta0 if learning_rate == 'constant' else None,
        'early_stopping': True,
        'n_jobs': -1  # Use all available CPU cores
    }

    # Initialize and fit the model
    model = SGDClassifier(**params)

    # Perform stratified k-fold cross-validation
    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=seed)
    scores = cross_val_score(model, X, y, cv=cv, scoring='accuracy')

    # Compute and return the loss value
    loss = 1.0 - scores.mean()
    return loss
```
Error occurred: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/Users/amirrezaalasti/.pyenv/versions/3.9.13/lib/python3.9/site-packages/sklearn/model_selection/_validation.py", line 888, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/Users/amirrezaalasti/.pyenv/versions/3.9.13/lib/python3.9/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/Users/amirrezaalasti/.pyenv/versions/3.9.13/lib/python3.9/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/Users/amirrezaalasti/.pyenv/versions/3.9.13/lib/python3.9/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'eta0' parameter of SGDClassifier must be a float in the range [0.0, inf). Got None instead.

Training function executed successfully.
Training function executed successfully.
Loss: 0.040000000000000036
