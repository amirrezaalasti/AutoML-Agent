[2025-05-20 12:04:23] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "random_forest"], default="knn")
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", bounds=(1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    knn_algorithm = Categorical("knn_algorithm", ["auto", "ball_tree", "kd_tree", "brute"], default="auto")
    leaf_size = Integer("leaf_size", bounds=(1, 50), default=30)
    p = Categorical("p", [1, 2], default=2)

    cs.add_hyperparameters([n_neighbors, weights, knn_algorithm, leaf_size, p])

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)
    svm_coef0 = Float("svm_coef0", bounds=(-1, 1), default=0.0)

    cs.add_hyperparameters([svm_kernel, svm_C, svm_gamma, svm_degree, svm_coef0])

    # Random Forest parameters
    rf_n_estimators = Integer("rf_n_estimators", bounds=(10, 200), default=100)
    rf_max_features = Categorical("rf_max_features", ["sqrt", "log2", None], default="sqrt")
    rf_min_samples_split = Integer("rf_min_samples_split", bounds=(2, 20), default=2)
    rf_min_samples_leaf = Integer("rf_min_samples_leaf", bounds=(1, 20), default=1)
    rf_max_depth = Integer("rf_max_depth", bounds=(1,100), default=None)

    cs.add_hyperparameters([rf_n_estimators, rf_max_features, rf_min_samples_split, rf_min_samples_leaf, rf_max_depth])

    # Add Forbidden Clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(p, 1)
    )

    cs.add_forbidden_clause(forbidden_clause)
    
    forbidden_clause_2 = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(leaf_size, 1)
    )

    cs.add_forbidden_clause(forbidden_clause_2)

    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:04:23] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "random_forest"], default="knn")
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", bounds=(1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    knn_algorithm = Categorical("knn_algorithm", ["auto", "ball_tree", "kd_tree", "brute"], default="auto")
    leaf_size = Integer("leaf_size", bounds=(1, 50), default=30)
    p = Categorical("p", [1, 2], default=2)

    cs.add_hyperparameters([n_neighbors, weights, knn_algorithm, leaf_size, p])

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=0.1, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)
    svm_coef0 = Float("svm_coef0", bounds=(-1, 1), default=0.0)

    cs.add_hyperparameters([svm_kernel, svm_C, svm_gamma, svm_degree, svm_coef0])

    # Random Forest parameters
    rf_n_estimators = Integer("rf_n_estimators", bounds=(10, 200), default=100)
    rf_max_features = Categorical("rf_max_features", ["sqrt", "log2", None], default="sqrt")
    rf_min_samples_split = Integer("rf_min_samples_split", bounds=(2, 20), default=2)
    rf_min_samples_leaf = Integer("rf_min_samples_leaf", bounds=(1, 20), default=1)
    rf_max_depth = Integer("rf_max_depth", bounds=(1,100), default=None)

    cs.add_hyperparameters([rf_n_estimators, rf_max_features, rf_min_samples_split, rf_min_samples_leaf, rf_max_depth])

    # Add Forbidden Clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(p, 1)
    )

    cs.add_forbidden_clause(forbidden_clause)
    
    forbidden_clause_2 = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(leaf_size, 1)
    )

    cs.add_forbidden_clause(forbidden_clause_2)

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:04:23] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-05-20 12:04:24] [Metadata: {'component': 'scenario'}] ```python
from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=10
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-05-20 12:04:24] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=10
    )
    return scenario

--------------------------------------------------------------------------------
[2025-05-20 12:04:24] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
[2025-05-20 12:04:29] [Metadata: {'component': 'train_function'}] ```python
from typing import Any

import numpy as np
from ConfigSpace import Configuration
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import log_loss


def train(cfg: Configuration, dataset: Any) -> float:
    """Trains a machine learning model based on the provided configuration and dataset.

    Args:
        cfg (Configuration): A configuration object containing hyperparameters for the model.
        dataset (Any): A dictionary containing the training data with keys 'X' (features) and 'y' (labels).

    Returns:
        float: The average training loss over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Infer input and output dimensions dynamically
    input_size = X.shape[1]
    num_classes = len(np.unique(y))

    # Split data into training and validation sets
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

    classifier_name = cfg.get("classifier")
    loss_values = []

    for epoch in range(10):
        if classifier_name == "knn":
            model = KNeighborsClassifier(
                n_neighbors=cfg.get("n_neighbors"),
                weights=cfg.get("weights"),
                algorithm=cfg.get("knn_algorithm"),
                leaf_size=cfg.get("leaf_size"),
                p=cfg.get("p")
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)
        elif classifier_name == "svm":
            model = SVC(
                kernel=cfg.get("svm_kernel"),
                C=cfg.get("svm_C"),
                gamma=cfg.get("svm_gamma"),
                degree=cfg.get("svm_degree"),
                coef0=cfg.get("svm_coef0"),
                probability=True # Required for predict_proba
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)

        elif classifier_name == "random_forest":
            model = RandomForestClassifier(
                n_estimators=cfg.get("rf_n_estimators"),
                max_features=cfg.get("rf_max_features"),
                min_samples_split=cfg.get("rf_min_samples_split"),
                min_samples_leaf=cfg.get("rf_min_samples_leaf"),
                max_depth=cfg.get("rf_max_depth"),
                random_state=42
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)
        else:
            raise ValueError(f"Unknown classifier: {classifier_name}")

    loss = np.mean(loss_values)
    return loss
```
--------------------------------------------------------------------------------
[2025-05-20 12:04:29] [Metadata: {'component': 'train_function', 'action': 'run'}] from typing import Any

import numpy as np
from ConfigSpace import Configuration
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import log_loss


def train(cfg: Configuration, dataset: Any) -> float:
    """Trains a machine learning model based on the provided configuration and dataset.

    Args:
        cfg (Configuration): A configuration object containing hyperparameters for the model.
        dataset (Any): A dictionary containing the training data with keys 'X' (features) and 'y' (labels).

    Returns:
        float: The average training loss over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Infer input and output dimensions dynamically
    input_size = X.shape[1]
    num_classes = len(np.unique(y))

    # Split data into training and validation sets
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

    classifier_name = cfg.get("classifier")
    loss_values = []

    for epoch in range(10):
        if classifier_name == "knn":
            model = KNeighborsClassifier(
                n_neighbors=cfg.get("n_neighbors"),
                weights=cfg.get("weights"),
                algorithm=cfg.get("knn_algorithm"),
                leaf_size=cfg.get("leaf_size"),
                p=cfg.get("p")
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)
        elif classifier_name == "svm":
            model = SVC(
                kernel=cfg.get("svm_kernel"),
                C=cfg.get("svm_C"),
                gamma=cfg.get("svm_gamma"),
                degree=cfg.get("svm_degree"),
                coef0=cfg.get("svm_coef0"),
                probability=True # Required for predict_proba
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)

        elif classifier_name == "random_forest":
            model = RandomForestClassifier(
                n_estimators=cfg.get("rf_n_estimators"),
                max_features=cfg.get("rf_max_features"),
                min_samples_split=cfg.get("rf_min_samples_split"),
                min_samples_leaf=cfg.get("rf_min_samples_leaf"),
                max_depth=cfg.get("rf_max_depth"),
                random_state=42
            )
            model.fit(X_train, y_train)
            y_pred = model.predict_proba(X_val)
            loss = log_loss(y_val, y_pred)
            loss_values.append(loss)
        else:
            raise ValueError(f"Unknown classifier: {classifier_name}")

    loss = np.mean(loss_values)
    return loss

--------------------------------------------------------------------------------
[2025-05-20 12:04:29] [Metadata: {'component': 'train_function', 'status': 'success', 'loss': 0.10175323703588032}] Training executed successfully, loss: 0.10175323703588032
--------------------------------------------------------------------------------
