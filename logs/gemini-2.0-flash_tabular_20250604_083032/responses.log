[2025-06-04 08:30:34] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    n_estimators = Integer("n_estimators", bounds=(50, 200), default=100)
    max_depth = Integer("max_depth", bounds=(2, 10), default=5)
    min_samples_split = Integer("min_samples_split", bounds=(2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", bounds=(1, 10), default=1)
    criterion = Categorical("criterion", ["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf, criterion])

    # Define forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(max_depth, 2),
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:30:34] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    n_estimators = Integer("n_estimators", bounds=(50, 200), default=100)
    max_depth = Integer("max_depth", bounds=(2, 10), default=5)
    min_samples_split = Integer("min_samples_split", bounds=(2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", bounds=(1, 10), default=1)
    criterion = Categorical("criterion", ["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf, criterion])

    # Define forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(max_depth, 2),
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:30:34] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-06-04 08:30:35] [Metadata: {'component': 'scenario'}] ```python
from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=100,
        n_workers=4
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-06-04 08:30:35] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=100,
        n_workers=4
    )
    return scenario

--------------------------------------------------------------------------------
[2025-06-04 08:30:35] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
[2025-06-04 08:30:38] [Metadata: {'component': 'train_function'}] ```python
from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score


def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains a RandomForestClassifier on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): The configuration object containing hyperparameters for the classifier.
        dataset (Any): A dictionary containing the training data, with 'X' as features and 'y' as labels.
        seed (int): A random seed for reproducibility.

    Returns:
        float: The average training loss (negative cross-validation score) over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Extract hyperparameters from the configuration
    n_estimators = cfg.get("n_estimators")
    max_depth = cfg.get("max_depth")
    min_samples_split = cfg.get("min_samples_split")
    min_samples_leaf = cfg.get("min_samples_leaf")
    criterion = cfg.get("criterion")

    # Create the RandomForestClassifier model
    model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        min_samples_leaf=min_samples_leaf,
        criterion=criterion,
        random_state=seed,
    )

    # Perform cross-validation to evaluate the model
    # Using negative cross-validation score because SMAC minimizes the objective function
    scores = cross_val_score(model, X, y, cv=10, scoring="neg_log_loss")

    # Calculate the average training loss
    loss = np.mean(scores)

    return loss
```
--------------------------------------------------------------------------------
[2025-06-04 08:30:38] [Metadata: {'component': 'train_function', 'action': 'run'}] from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score


def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains a RandomForestClassifier on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): The configuration object containing hyperparameters for the classifier.
        dataset (Any): A dictionary containing the training data, with 'X' as features and 'y' as labels.
        seed (int): A random seed for reproducibility.

    Returns:
        float: The average training loss (negative cross-validation score) over 10 epochs.
    """

    X = dataset['X']
    y = dataset['y']

    # Extract hyperparameters from the configuration
    n_estimators = cfg.get("n_estimators")
    max_depth = cfg.get("max_depth")
    min_samples_split = cfg.get("min_samples_split")
    min_samples_leaf = cfg.get("min_samples_leaf")
    criterion = cfg.get("criterion")

    # Create the RandomForestClassifier model
    model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        min_samples_leaf=min_samples_leaf,
        criterion=criterion,
        random_state=seed,
    )

    # Perform cross-validation to evaluate the model
    # Using negative cross-validation score because SMAC minimizes the objective function
    scores = cross_val_score(model, X, y, cv=10, scoring="neg_log_loss")

    # Calculate the average training loss
    loss = np.mean(scores)

    return loss

--------------------------------------------------------------------------------
[2025-06-04 08:30:38] [Metadata: {'component': 'train_function', 'status': 'success', 'loss': -0.13524505508538592}] Training executed successfully, loss: -0.13524505508538592
--------------------------------------------------------------------------------
