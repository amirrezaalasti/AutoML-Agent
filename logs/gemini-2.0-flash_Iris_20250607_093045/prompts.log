[2025-06-07 09:30:53] [Metadata: {'component': 'config'}] **TASK**

**Goal:**
Write a Python function named `get_configspace()` that returns a valid `ConfigurationSpace` object for a classification task.

---

**STRICT OUTPUT RULES**

* Output **only** the complete `get_configspace()` function and **required imports**.
* Do **not** include any explanations, comments, docstrings, or extra text.
* The code must be **syntactically correct**, **executable**, and **compatible with SMAC**.

---

**ALLOWED CLASSES**

**Core**

* `ConfigurationSpace`
* `Categorical`
* `Float`
* `Integer`
* `Constant`

**Conditions**

* `EqualsCondition`
* `InCondition`
* `OrConjunction`

**Forbidden Clauses**

* `ForbiddenEqualsClause`
* `ForbiddenAndConjunction` *(must include at least one)*

**Distributions (only if needed)**

* `Beta`
* `Normal`

**Serialization (only if needed)**

* `to_yaml()`
* `from_yaml()`

---

**CONSTRAINTS**

* Must include **at least one** `ForbiddenAndConjunction` to block invalid hyperparameter combinations.

---

**DATASET DESCRIPTION**

* Use the following information to design the configuration space:
  `This is a tabular dataset.
It has 150 samples and 4 features.
Feature columns and types:
- 0: float64
- 1: float64
- 2: float64
- 3: float64

Feature statistical summary:
                0           1           2           3
count  150.000000  150.000000  150.000000  150.000000
mean     5.843333    3.057333    3.758000    1.199333
std      0.828066    0.435866    1.765298    0.762238
min      4.300000    2.000000    1.000000    0.100000
25%      5.100000    2.800000    1.600000    0.300000
50%      5.800000    3.000000    4.350000    1.300000
75%      6.400000    3.300000    5.100000    1.800000
max      7.900000    4.400000    6.900000    2.500000

Label distribution:
0    50
1    50
2    50
Name: count, dtype: int64`
* Hyperparameter choices and model types must be suitable for this classification dataset.

---

**SUGGESTED PARAMETERS From OpenML**

* Here are some parameter configurations for this dataset from OpenML (for inspiration only, not mandatory):
  `[{56535: OpenML Parameter
================
ID............: 56535
Flow ID.......: 6048
Flow Name.....: sklearn.pipeline.Pipeline(dualimputer=helper.dual_imputer.DualImputer,nusvc=sklearn.svm.classes.NuSVC)(1)_steps
Flow URL......: https://www.openml.org/f/6048
Parameter Name: steps
  |__Data Type: None
  |__Default..: [{"oml-python:serialized_object": "component_reference", "value": {"key": "dualimputer", "step_name": "dualimputer"}}, {"oml-python:serialized_object": "component_reference", "value": {"key": "nusvc", "step_name": "nusvc"}}]
  |__Value....: [('dualimputer', <helper.dual_imputer.DualImputer object at 0x7f9edc7cfe48>), ('nusvc', NuSVC(cache_size=200, class_weight=None, coef0=0.0,
   decision_function_shape=None, degree=3, gamma='auto', kernel='linear',
   max_iter=-1, nu=0.3, probability=True, random_state=None,
   shrinking=True, tol=0.001, verbose=False))], 56536: OpenML Parameter
================
ID............: 56536
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_cache_size
Flow URL......: https://www.openml.org/f/6049
Parameter Name: cache_size
  |__Data Type: None
  |__Default..: 200
  |__Value....: 200, 56537: OpenML Parameter
================
ID............: 56537
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_class_weight
Flow URL......: https://www.openml.org/f/6049
Parameter Name: class_weight
  |__Data Type: None
  |__Default..: null
  |__Value....: None, 56538: OpenML Parameter
================
ID............: 56538
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_coef0
Flow URL......: https://www.openml.org/f/6049
Parameter Name: coef0
  |__Data Type: None
  |__Default..: 0.0
  |__Value....: 0.0, 56539: OpenML Parameter
================
ID............: 56539
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_decision_function_shape
Flow URL......: https://www.openml.org/f/6049
Parameter Name: decision_function_shape
  |__Data Type: None
  |__Default..: null
  |__Value....: None, 56540: OpenML Parameter
================
ID............: 56540
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_degree
Flow URL......: https://www.openml.org/f/6049
Parameter Name: degree
  |__Data Type: None
  |__Default..: 3
  |__Value....: 3, 56541: OpenML Parameter
================
ID............: 56541
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_gamma
Flow URL......: https://www.openml.org/f/6049
Parameter Name: gamma
  |__Data Type: None
  |__Default..: "auto"
  |__Value....: auto, 56542: OpenML Parameter
================
ID............: 56542
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_kernel
Flow URL......: https://www.openml.org/f/6049
Parameter Name: kernel
  |__Data Type: None
  |__Default..: "rbf"
  |__Value....: linear, 56543: OpenML Parameter
================
ID............: 56543
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_max_iter
Flow URL......: https://www.openml.org/f/6049
Parameter Name: max_iter
  |__Data Type: None
  |__Default..: -1
  |__Value....: -1, 56544: OpenML Parameter
================
ID............: 56544
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_nu
Flow URL......: https://www.openml.org/f/6049
Parameter Name: nu
  |__Data Type: None
  |__Default..: 0.5
  |__Value....: 0.3, 56545: OpenML Parameter
================
ID............: 56545
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_probability
Flow URL......: https://www.openml.org/f/6049
Parameter Name: probability
  |__Data Type: None
  |__Default..: false
  |__Value....: True, 56546: OpenML Parameter
================
ID............: 56546
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_random_state
Flow URL......: https://www.openml.org/f/6049
Parameter Name: random_state
  |__Data Type: None
  |__Default..: null
  |__Value....: None, 56547: OpenML Parameter
================
ID............: 56547
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_shrinking
Flow URL......: https://www.openml.org/f/6049
Parameter Name: shrinking
  |__Data Type: None
  |__Default..: true
  |__Value....: True, 56548: OpenML Parameter
================
ID............: 56548
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_tol
Flow URL......: https://www.openml.org/f/6049
Parameter Name: tol
  |__Data Type: None
  |__Default..: 0.001
  |__Value....: 0.001, 56549: OpenML Parameter
================
ID............: 56549
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_verbose
Flow URL......: https://www.openml.org/f/6049
Parameter Name: verbose
  |__Data Type: None
  |__Default..: false
  |__Value....: False}, {56535: OpenML Parameter
================
ID............: 56535
Flow ID.......: 6048
Flow Name.....: sklearn.pipeline.Pipeline(dualimputer=helper.dual_imputer.DualImputer,nusvc=sklearn.svm.classes.NuSVC)(1)_steps
Flow URL......: https://www.openml.org/f/6048
Parameter Name: steps
  |__Data Type: None
  |__Default..: [{"oml-python:serialized_object": "component_reference", "value": {"key": "dualimputer", "step_name": "dualimputer"}}, {"oml-python:serialized_object": "component_reference", "value": {"key": "nusvc", "step_name": "nusvc"}}]
  |__Value....: [('dualimputer', <helper.dual_imputer.DualImputer object at 0x7f5bb3649f60>), ('nusvc', NuSVC(cache_size=200, class_weight=None, coef0=0.0,
   decision_function_shape=None, degree=3, gamma='auto', kernel='linear',
   max_iter=-1, nu=0.3, probability=True, random_state=3, shrinking=True,
   tol=2.7236785791009957e-05, verbose=False))], 56536: OpenML Parameter
================
ID............: 56536
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_cache_size
Flow URL......: https://www.openml.org/f/6049
Parameter Name: cache_size
  |__Data Type: None
  |__Default..: 200
  |__Value....: 200, 56537: OpenML Parameter
================
ID............: 56537
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_class_weight
Flow URL......: https://www.openml.org/f/6049
Parameter Name: class_weight
  |__Data Type: None
  |__Default..: null
  |__Value....: None, 56538: OpenML Parameter
================
ID............: 56538
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_coef0
Flow URL......: https://www.openml.org/f/6049
Parameter Name: coef0
  |__Data Type: None
  |__Default..: 0.0
  |__Value....: 0.0, 56539: OpenML Parameter
================
ID............: 56539
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_decision_function_shape
Flow URL......: https://www.openml.org/f/6049
Parameter Name: decision_function_shape
  |__Data Type: None
  |__Default..: null
  |__Value....: None, 56540: OpenML Parameter
================
ID............: 56540
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_degree
Flow URL......: https://www.openml.org/f/6049
Parameter Name: degree
  |__Data Type: None
  |__Default..: 3
  |__Value....: 3, 56541: OpenML Parameter
================
ID............: 56541
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_gamma
Flow URL......: https://www.openml.org/f/6049
Parameter Name: gamma
  |__Data Type: None
  |__Default..: "auto"
  |__Value....: auto, 56542: OpenML Parameter
================
ID............: 56542
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_kernel
Flow URL......: https://www.openml.org/f/6049
Parameter Name: kernel
  |__Data Type: None
  |__Default..: "rbf"
  |__Value....: linear, 56543: OpenML Parameter
================
ID............: 56543
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_max_iter
Flow URL......: https://www.openml.org/f/6049
Parameter Name: max_iter
  |__Data Type: None
  |__Default..: -1
  |__Value....: -1, 56544: OpenML Parameter
================
ID............: 56544
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_nu
Flow URL......: https://www.openml.org/f/6049
Parameter Name: nu
  |__Data Type: None
  |__Default..: 0.5
  |__Value....: 0.3, 56545: OpenML Parameter
================
ID............: 56545
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_probability
Flow URL......: https://www.openml.org/f/6049
Parameter Name: probability
  |__Data Type: None
  |__Default..: false
  |__Value....: True, 56546: OpenML Parameter
================
ID............: 56546
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_random_state
Flow URL......: https://www.openml.org/f/6049
Parameter Name: random_state
  |__Data Type: None
  |__Default..: null
  |__Value....: 3, 56547: OpenML Parameter
================
ID............: 56547
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_shrinking
Flow URL......: https://www.openml.org/f/6049
Parameter Name: shrinking
  |__Data Type: None
  |__Default..: true
  |__Value....: True, 56548: OpenML Parameter
================
ID............: 56548
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_tol
Flow URL......: https://www.openml.org/f/6049
Parameter Name: tol
  |__Data Type: None
  |__Default..: 0.001
  |__Value....: 2.7236785791e-05, 56549: OpenML Parameter
================
ID............: 56549
Flow ID.......: 6049
Flow Name.....: sklearn.svm.classes.NuSVC(1)_verbose
Flow URL......: https://www.openml.org/f/6049
Parameter Name: verbose
  |__Data Type: None
  |__Default..: false
  |__Value....: False}]`

---

**IMPORTANT RULE**

* Do **not** use any class, function, method, or module outside the **ALLOWED CLASSES** list.

---

**EXAMPLES**

* See provided examples for valid usage of hyperparameters, conditions, forbidden clauses, and priors.

[EXAMPLES]

# Example 1: Basic ConfigurationSpace
```python
from ConfigSpace import ConfigurationSpace

cs = ConfigurationSpace(
    space={
        "C": (-1.0, 1.0),
        "max_iter": (10, 100),
    },
)
```
# Example 2: Adding Hyperparameters
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer

kernel_type = Categorical('kernel_type', ['linear', 'poly', 'rbf', 'sigmoid'])
degree = Integer('degree', bounds=(2, 4), default=2)
coef0 = Float('coef0', bounds=(0, 1), default=0.0)
gamma = Float('gamma', bounds=(1e-5, 1e2), default=1, log=True)

cs = ConfigurationSpace()
cs.add([kernel_type, degree, coef0, gamma])
```
# Example 3: Adding Conditions
```python
from ConfigSpace import EqualsCondition, InCondition, OrConjunction

cond_1 = EqualsCondition(degree, kernel_type, 'poly')
cond_2 = OrConjunction(
    EqualsCondition(coef0, kernel_type, 'poly'),
    EqualsCondition(coef0, kernel_type, 'sigmoid')
)
cond_3 = InCondition(gamma, kernel_type, ['rbf', 'poly', 'sigmoid'])
```
# Example 4: Adding Forbidden Clauses
```pyhon
from ConfigSpace import ForbiddenEqualsClause, ForbiddenAndConjunction

penalty_and_loss = ForbiddenAndConjunction(
    ForbiddenEqualsClause(penalty, "l1"),
    ForbiddenEqualsClause(loss, "hinge")
)
constant_penalty_and_loss = ForbiddenAndConjunction(
    ForbiddenEqualsClause(dual, "False"),
    ForbiddenEqualsClause(penalty, "l2"),
    ForbiddenEqualsClause(loss, "hinge")
)
penalty_and_dual = ForbiddenAndConjunction(
    ForbiddenEqualsClause(dual, "False"),
    ForbiddenEqualsClause(penalty, "l1")
)
```
Example 5: Serialization
```python
from pathlib import Path
from ConfigSpace import ConfigurationSpace

path = Path("configspace.yaml")
cs = ConfigurationSpace(
    space={
        "C": (-1.0, 1.0),
        "max_iter": (10, 100),
    },
)
cs.to_yaml(path)
loaded_cs = ConfigurationSpace.from_yaml(path)
```
# Example 6: Priors
```python
import numpy as np
from ConfigSpace import ConfigurationSpace, Float, Categorical, Beta, Normal

cs = ConfigurationSpace(
    space={
        "lr": Float(
            'lr',
            bounds=(1e-5, 1e-1),
            default=1e-3,
            log=True,
            distribution=Normal(1e-3, 1e-1)
        ),
        "dropout": Float(
            'dropout',
            bounds=(0, 0.99),
            default=0.25,
            distribution=Beta(alpha=2, beta=4)
        ),
        "activation": Categorical(
            'activation',
            items=['tanh', 'relu'],
            weights=[0.2, 0.8]
        ),
    },
)
--------------------------------------------------------------------------------
[2025-06-07 09:30:53] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-06-07 09:30:53] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#1): Categorical() got an unexpected keyword argument 'choices'
--------------------------------------------------------------------------------
[2025-06-07 09:30:53] [Metadata: {'component': 'config', 'action': 'fix'}] The following python code is generated by an LLM which now has run into the following errors:
Categorical() got an unexpected keyword argument 'choices'

Your task is to fix the issues in the code. The requirements below MUST be respected:

1. Do not change the function name or its purpose.
2. Fix all syntax and runtime errors.
3. Use only valid parameters.
4. Do not change the logic unless necessary for fixing errors.
5. Return ONLY the corrected function code — no explanations, comments, or extra output.
6. The function must be syntactically and semantically correct, and executable with `exec`.

Buggy code:
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters for a RandomForestClassifier
    n_estimators = Integer("n_estimators", bounds=(10, 200), default=100)
    max_features = Float("max_features", bounds=(0.1, 1.0), default=0.5)
    min_samples_split = Integer("min_samples_split", bounds=(2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", bounds=(1, 10), default=1)
    criterion = Categorical("criterion", choices=["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_features, min_samples_split, min_samples_leaf, criterion])

    # Add a forbidden clause
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(min_samples_split, 2),
        ForbiddenEqualsClause(min_samples_leaf, 1)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```

--------------------------------------------------------------------------------
[2025-06-07 09:30:54] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-06-07 09:30:54] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#2): Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)
--------------------------------------------------------------------------------
[2025-06-07 09:30:54] [Metadata: {'component': 'config', 'action': 'fix'}] The following python code is generated by an LLM which now has run into the following errors:
Categorical() got an unexpected keyword argument 'choices'
Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)

Your task is to fix the issues in the code. The requirements below MUST be respected:

1. Do not change the function name or its purpose.
2. Fix all syntax and runtime errors.
3. Use only valid parameters.
4. Do not change the logic unless necessary for fixing errors.
5. Return ONLY the corrected function code — no explanations, comments, or extra output.
6. The function must be syntactically and semantically correct, and executable with `exec`.

Buggy code:
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters for a RandomForestClassifier
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_features = Float("max_features", (0.1, 1.0), default=0.5)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    criterion = Categorical("criterion", ["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_features, min_samples_split, min_samples_leaf, criterion])

    # Add a forbidden clause
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(min_samples_split, 2),
        ForbiddenEqualsClause(min_samples_leaf, 1)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```

--------------------------------------------------------------------------------
[2025-06-07 09:30:56] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-06-07 09:30:56] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#3): Categorical() got an unexpected keyword argument 'choices'
--------------------------------------------------------------------------------
[2025-06-07 09:30:56] [Metadata: {'component': 'config', 'action': 'fix'}] The following python code is generated by an LLM which now has run into the following errors:
Categorical() got an unexpected keyword argument 'choices'
Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)
Categorical() got an unexpected keyword argument 'choices'

Your task is to fix the issues in the code. The requirements below MUST be respected:

1. Do not change the function name or its purpose.
2. Fix all syntax and runtime errors.
3. Use only valid parameters.
4. Do not change the logic unless necessary for fixing errors.
5. Return ONLY the corrected function code — no explanations, comments, or extra output.
6. The function must be syntactically and semantically correct, and executable with `exec`.

Buggy code:
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters for a RandomForestClassifier
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_features = Float("max_features", (0.1, 1.0), default=0.5)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    criterion = Categorical("criterion", choices=["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_features, min_samples_split, min_samples_leaf, criterion])

    # Add a forbidden clause
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(min_samples_split, 2),
        ForbiddenEqualsClause(min_samples_leaf, 1)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```

--------------------------------------------------------------------------------
[2025-06-07 09:30:58] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-06-07 09:30:58] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#4): Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)
--------------------------------------------------------------------------------
[2025-06-07 09:30:58] [Metadata: {'component': 'config', 'action': 'fix'}] The following python code is generated by an LLM which now has run into the following errors:
Categorical() got an unexpected keyword argument 'choices'
Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)
Categorical() got an unexpected keyword argument 'choices'
Given vector violates forbidden clause: (Forbidden: criterion == 'gini' && Forbidden: min_samples_leaf == 1 && Forbidden: min_samples_split == 2)

Your task is to fix the issues in the code. The requirements below MUST be respected:

1. Do not change the function name or its purpose.
2. Fix all syntax and runtime errors.
3. Use only valid parameters.
4. Do not change the logic unless necessary for fixing errors.
5. Return ONLY the corrected function code — no explanations, comments, or extra output.
6. The function must be syntactically and semantically correct, and executable with `exec`.

Buggy code:
```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters for a RandomForestClassifier
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_features = Float("max_features", (0.1, 1.0), default=0.5)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    criterion = Categorical("criterion", ["gini", "entropy"], default="gini")

    cs.add_hyperparameters([n_estimators, max_features, min_samples_split, min_samples_leaf, criterion])

    # Add a forbidden clause
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(criterion, "gini"),
        ForbiddenEqualsClause(min_samples_split, 2),
        ForbiddenEqualsClause(min_samples_leaf, 1)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```

--------------------------------------------------------------------------------
[2025-06-07 09:30:59] [Metadata: {'component': 'config', 'action': 'run'}] Running config code:
--------------------------------------------------------------------------------
[2025-06-07 09:30:59] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#5): Categorical() got an unexpected keyword argument 'choices'
--------------------------------------------------------------------------------
[2025-06-07 09:30:59] [Metadata: {'component': 'config', 'action': 'retry'}] Retry limit reached for config. Fetching fresh code from LLM.
--------------------------------------------------------------------------------
