[2025-06-07 09:43:49] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    kernel = Categorical('kernel', ['linear', 'rbf', 'poly', 'sigmoid'], default='rbf')
    C = Float('C', (1e-5, 10), default=1.0, log=True)
    gamma = Float('gamma', (1e-5, 10), default=0.1, log=True)
    degree = Integer('degree', (2, 5), default=3)
    coef0 = Float('coef0', (-1, 1), default=0.0)

    # Add hyperparameters to the ConfigurationSpace
    cs.add([kernel, C, gamma, degree, coef0])

    # Add forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(kernel, 'linear'),
        ForbiddenEqualsClause(degree, 3)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs
```
--------------------------------------------------------------------------------
[2025-06-07 09:43:49] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    kernel = Categorical('kernel', ['linear', 'rbf', 'poly', 'sigmoid'], default='rbf')
    C = Float('C', (1e-5, 10), default=1.0, log=True)
    gamma = Float('gamma', (1e-5, 10), default=0.1, log=True)
    degree = Integer('degree', (2, 5), default=3)
    coef0 = Float('coef0', (-1, 1), default=0.0)

    # Add hyperparameters to the ConfigurationSpace
    cs.add([kernel, C, gamma, degree, coef0])

    # Add forbidden clauses
    forbidden_clause = ForbiddenAndConjunction(
        ForbiddenEqualsClause(kernel, 'linear'),
        ForbiddenEqualsClause(degree, 3)
    )
    cs.add_forbidden_clause(forbidden_clause)

    return cs

--------------------------------------------------------------------------------
[2025-06-07 09:43:49] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-06-07 09:43:50] [Metadata: {'component': 'scenario'}] ```python
from smac.scenario import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        name="gemini-2.0-flashiris20250607_094349",
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=9,
        objectives='loss',
        n_trials=10,
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-06-07 09:43:50] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac.scenario import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        name="gemini-2.0-flashiris20250607_094349",
        output_directory="./automl_results",
        deterministic=False,
        n_workers=2,
        min_budget=1,
        max_budget=9,
        objectives='loss',
        n_trials=10,
    )
    return scenario

--------------------------------------------------------------------------------
[2025-06-07 09:43:50] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
