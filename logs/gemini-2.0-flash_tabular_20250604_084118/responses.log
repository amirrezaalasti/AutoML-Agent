[2025-06-04 08:41:21] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default="scale", log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "rbf")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "linear")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "poly")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "sigmoid")
        )
    )

    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:21] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default="scale", log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "rbf")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "linear")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "poly")
        )
    )
    cs.add_condition(
        ForbiddenAndConjunction(
            ForbiddenEqualsClause(classifier, "knn"),
            ForbiddenEqualsClause(kernel, "sigmoid")
        )
    )

    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:21] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#1): ufunc 'multiply' did not contain a loop with signature matching types (dtype('<U5'), dtype('float64')) -> None
--------------------------------------------------------------------------------
[2025-06-04 08:41:25] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    Condition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default=1.0, log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = Condition(
        child=n_neighbors, parent=classifier, values=["knn"]
    )
    weights_condition = Condition(
        child=weights, parent=classifier, values=["knn"]
    )
    C_condition = Condition(child=C, parent=classifier, values=["svm"])
    kernel_condition = Condition(
        child=kernel, parent=classifier, values=["svm"]
    )
    gamma_condition = Condition(child=gamma, parent=classifier, values=["svm"])
    degree_condition = Condition(child=degree, parent=classifier, values=["svm"])
    n_estimators_condition = Condition(
        child=n_estimators, parent=classifier, values=["random_forest"]
    )
    max_depth_condition = Condition(
        child=max_depth, parent=classifier, values=["random_forest"]
    )
    min_samples_split_condition = Condition(
        child=min_samples_split, parent=classifier, values=["random_forest"]
    )
    min_samples_leaf_condition = Condition(
        child=min_samples_leaf, parent=classifier, values=["random_forest"]
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:25] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    Condition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default=1.0, log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = Condition(
        child=n_neighbors, parent=classifier, values=["knn"]
    )
    weights_condition = Condition(
        child=weights, parent=classifier, values=["knn"]
    )
    C_condition = Condition(child=C, parent=classifier, values=["svm"])
    kernel_condition = Condition(
        child=kernel, parent=classifier, values=["svm"]
    )
    gamma_condition = Condition(child=gamma, parent=classifier, values=["svm"])
    degree_condition = Condition(child=degree, parent=classifier, values=["svm"])
    n_estimators_condition = Condition(
        child=n_estimators, parent=classifier, values=["random_forest"]
    )
    max_depth_condition = Condition(
        child=max_depth, parent=classifier, values=["random_forest"]
    )
    min_samples_split_condition = Condition(
        child=min_samples_split, parent=classifier, values=["random_forest"]
    )
    min_samples_leaf_condition = Condition(
        child=min_samples_leaf, parent=classifier, values=["random_forest"]
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:25] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#2): cannot import name 'Condition' from 'ConfigSpace' (/opt/anaconda3/envs/SMAC/lib/python3.10/site-packages/ConfigSpace/__init__.py)
--------------------------------------------------------------------------------
[2025-06-04 08:41:29] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default=1.0, log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None, default_value=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:29] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default=5)
    weights = Categorical("weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    gamma = Float("gamma", (1e-5, 100), default=1.0, log=True)
    degree = Integer("degree", (2, 5), default=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default=100)
    max_depth = Integer("max_depth", (2, 10), default=None, default_value=None)
    min_samples_split = Integer("min_samples_split", (2, 10), default=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:29] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#3): Integer() got an unexpected keyword argument 'default_value'
--------------------------------------------------------------------------------
[2025-06-04 08:41:33] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default_value="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default_value=5)
    weights = Categorical("weights", ["uniform", "distance"], default_value="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default_value=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default_value="rbf")
    gamma = Float("gamma", (1e-5, 100), default_value=1.0, log=True)
    degree = Integer("degree", (2, 5), default_value=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default_value=100)
    max_depth = Integer("max_depth", (2, 10), default_value=2)
    min_samples_split = Integer("min_samples_split", (2, 10), default_value=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default_value=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:33] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    Categorical,
    Float,
    Integer,
    ForbiddenAndConjunction,
    ForbiddenEqualsClause,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = Categorical(
        "classifier", ["knn", "svm", "random_forest"], default_value="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", (1, 20), default_value=5)
    weights = Categorical("weights", ["uniform", "distance"], default_value="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = Float("C", (1e-4, 1000), default_value=1.0, log=True)
    kernel = Categorical("kernel", ["linear", "rbf", "poly", "sigmoid"], default_value="rbf")
    gamma = Float("gamma", (1e-5, 100), default_value=1.0, log=True)
    degree = Integer("degree", (2, 5), default_value=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = Integer("n_estimators", (10, 200), default_value=100)
    max_depth = Integer("max_depth", (2, 10), default_value=2)
    min_samples_split = Integer("min_samples_split", (2, 10), default_value=2)
    min_samples_leaf = Integer("min_samples_leaf", (1, 10), default_value=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:33] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#4): Categorical() got an unexpected keyword argument 'default_value'
--------------------------------------------------------------------------------
[2025-06-04 08:41:38] [Metadata: {'component': 'config', 'action': 'fix'}] ```python
from ConfigSpace import (
    ConfigurationSpace,
    CategoricalHyperparameter,
    FloatHyperparameter,
    IntegerHyperparameter,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = CategoricalHyperparameter(
        "classifier", ["knn", "svm", "random_forest"], default_value="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = IntegerHyperparameter("n_neighbors", (1, 20), default_value=5)
    weights = CategoricalHyperparameter("weights", ["uniform", "distance"], default_value="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = FloatHyperparameter("C", (1e-4, 1000), default_value=1.0, log=True)
    kernel = CategoricalHyperparameter("kernel", ["linear", "rbf", "poly", "sigmoid"], default_value="rbf")
    gamma = FloatHyperparameter("gamma", (1e-5, 100), default_value=1.0, log=True)
    degree = IntegerHyperparameter("degree", (2, 5), default_value=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = IntegerHyperparameter("n_estimators", (10, 200), default_value=100)
    max_depth = IntegerHyperparameter("max_depth", (2, 10), default_value=2)
    min_samples_split = IntegerHyperparameter("min_samples_split", (2, 10), default_value=2)
    min_samples_leaf = IntegerHyperparameter("min_samples_leaf", (1, 10), default_value=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:38] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import (
    ConfigurationSpace,
    CategoricalHyperparameter,
    FloatHyperparameter,
    IntegerHyperparameter,
    EqualsCondition,
)


def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    classifier = CategoricalHyperparameter(
        "classifier", ["knn", "svm", "random_forest"], default_value="random_forest"
    )
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = IntegerHyperparameter("n_neighbors", (1, 20), default_value=5)
    weights = CategoricalHyperparameter("weights", ["uniform", "distance"], default_value="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    C = FloatHyperparameter("C", (1e-4, 1000), default_value=1.0, log=True)
    kernel = CategoricalHyperparameter("kernel", ["linear", "rbf", "poly", "sigmoid"], default_value="rbf")
    gamma = FloatHyperparameter("gamma", (1e-5, 100), default_value=1.0, log=True)
    degree = IntegerHyperparameter("degree", (2, 5), default_value=3)
    cs.add_hyperparameters([C, kernel, gamma, degree])

    # Random Forest parameters
    n_estimators = IntegerHyperparameter("n_estimators", (10, 200), default_value=100)
    max_depth = IntegerHyperparameter("max_depth", (2, 10), default_value=2)
    min_samples_split = IntegerHyperparameter("min_samples_split", (2, 10), default_value=2)
    min_samples_leaf = IntegerHyperparameter("min_samples_leaf", (1, 10), default_value=1)
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add conditions
    knn_condition = EqualsCondition(
        n_neighbors, classifier, "knn"
    )
    weights_condition = EqualsCondition(
        weights, classifier, "knn"
    )
    C_condition = EqualsCondition(C, classifier, "svm")
    kernel_condition = EqualsCondition(
        kernel, classifier, "svm"
    )
    gamma_condition = EqualsCondition(gamma, classifier, "svm")
    degree_condition = EqualsCondition(degree, classifier, "svm")
    n_estimators_condition = EqualsCondition(
        n_estimators, classifier, "random_forest"
    )
    max_depth_condition = EqualsCondition(
        max_depth, classifier, "random_forest"
    )
    min_samples_split_condition = EqualsCondition(
        min_samples_split, classifier, "random_forest"
    )
    min_samples_leaf_condition = EqualsCondition(
        min_samples_leaf, classifier, "random_forest"
    )

    cs.add_conditions(
        [
            knn_condition,
            weights_condition,
            C_condition,
            kernel_condition,
            gamma_condition,
            degree_condition,
            n_estimators_condition,
            max_depth_condition,
            min_samples_split_condition,
            min_samples_leaf_condition,
        ]
    )
    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:38] [Metadata: {'error_type': 'CONFIG_ERROR'}] [CONFIG_ERROR] Error in config (#5): cannot import name 'FloatHyperparameter' from 'ConfigSpace' (/opt/anaconda3/envs/SMAC/lib/python3.10/site-packages/ConfigSpace/__init__.py)
--------------------------------------------------------------------------------
[2025-06-04 08:41:40] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause
from ConfigSpace import EqualsCondition, InCondition, OrConjunction

def get_configspace():
    cs = ConfigurationSpace()

    # Define hyperparameters
    n_estimators = Integer("n_estimators", bounds=(50, 200), default=100)
    max_depth = Integer("max_depth", bounds=(2, 10), default=5)
    min_samples_split = Float("min_samples_split", bounds=(0.01, 0.1), default=0.05)
    min_samples_leaf = Float("min_samples_leaf", bounds=(0.01, 0.1), default=0.05)
    
    cs.add_hyperparameters([n_estimators, max_depth, min_samples_split, min_samples_leaf])

    # Add forbidden clause
    cs.add_forbidden_clause(ForbiddenAndConjunction(
        ForbiddenEqualsClause(n_estimators, 50),
        ForbiddenEqualsClause(max_depth, 2)
    ))

    return cs

--------------------------------------------------------------------------------
[2025-06-04 08:41:40] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-06-04 08:41:41] [Metadata: {'component': 'scenario'}] ```python
from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs: ConfigurationSpace):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        n_workers=4,
        min_budget=1,
        max_budget=100
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:41] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs: ConfigurationSpace):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        n_workers=4,
        min_budget=1,
        max_budget=100
    )
    return scenario

--------------------------------------------------------------------------------
[2025-06-04 08:41:41] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
[2025-06-04 08:41:44] [Metadata: {'component': 'train_function'}] ```python
from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains a RandomForestClassifier on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): Configuration object containing hyperparameters.
        dataset (Any): Dictionary containing the dataset with 'X' (features) and 'y' (labels).
        seed (int): Random seed for reproducibility.

    Returns:
        float: Average training loss (negative cross-validation score).
    """

    X = dataset['X']
    y = dataset['y']

    # Ensure X and y are numpy arrays
    X = np.array(X)
    y = np.array(y)

    # Instantiate the Random Forest Classifier with hyperparameters from the configuration
    model = RandomForestClassifier(
        n_estimators=cfg.get("n_estimators"),
        max_depth=cfg.get("max_depth"),
        min_samples_split=cfg.get("min_samples_split"),
        min_samples_leaf=cfg.get("min_samples_leaf"),
        random_state=seed,
        n_jobs=-1  # Use all available cores
    )

    # Perform cross-validation (e.g., 3-fold) and calculate the average score.
    # We use cross_val_score with 'neg_mean_squared_error' for loss calculation.
    # The goal is to minimize the loss, so we use negative MSE as the score.
    try:
        scores = cross_val_score(model, X, y, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)
        loss = -np.mean(scores)  # Convert back to positive MSE
    except ValueError as e:
        # Handle cases where cross-validation might fail due to hyperparameter settings.
        # For instance, if min_samples_split or min_samples_leaf are too high.
        # Return a large loss value to penalize such configurations.
        print(f"ValueError during cross-validation: {e}. Returning a large loss.")
        loss = 100.0  # Assign a large penalty loss

    return float(loss)
```
--------------------------------------------------------------------------------
[2025-06-04 08:41:44] [Metadata: {'component': 'train_function', 'action': 'run'}] from typing import Any
from ConfigSpace import Configuration
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

def train(cfg: Configuration, dataset: Any, seed: int) -> float:
    """
    Trains a RandomForestClassifier on the given dataset using the provided configuration.

    Args:
        cfg (Configuration): Configuration object containing hyperparameters.
        dataset (Any): Dictionary containing the dataset with 'X' (features) and 'y' (labels).
        seed (int): Random seed for reproducibility.

    Returns:
        float: Average training loss (negative cross-validation score).
    """

    X = dataset['X']
    y = dataset['y']

    # Ensure X and y are numpy arrays
    X = np.array(X)
    y = np.array(y)

    # Instantiate the Random Forest Classifier with hyperparameters from the configuration
    model = RandomForestClassifier(
        n_estimators=cfg.get("n_estimators"),
        max_depth=cfg.get("max_depth"),
        min_samples_split=cfg.get("min_samples_split"),
        min_samples_leaf=cfg.get("min_samples_leaf"),
        random_state=seed,
        n_jobs=-1  # Use all available cores
    )

    # Perform cross-validation (e.g., 3-fold) and calculate the average score.
    # We use cross_val_score with 'neg_mean_squared_error' for loss calculation.
    # The goal is to minimize the loss, so we use negative MSE as the score.
    try:
        scores = cross_val_score(model, X, y, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)
        loss = -np.mean(scores)  # Convert back to positive MSE
    except ValueError as e:
        # Handle cases where cross-validation might fail due to hyperparameter settings.
        # For instance, if min_samples_split or min_samples_leaf are too high.
        # Return a large loss value to penalize such configurations.
        print(f"ValueError during cross-validation: {e}. Returning a large loss.")
        loss = 100.0  # Assign a large penalty loss

    return float(loss)

--------------------------------------------------------------------------------
[2025-06-04 08:41:46] [Metadata: {'component': 'train_function', 'status': 'success', 'loss': 0.04666666666666667}] Training executed successfully, loss: 0.04666666666666667
--------------------------------------------------------------------------------
