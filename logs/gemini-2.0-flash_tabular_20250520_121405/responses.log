[2025-05-20 12:14:09] [Metadata: {'component': 'config'}] ```python
from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "random_forest"], default="knn")
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", bounds=(1, 20), default=5)
    weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=1.0, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)
    cs.add_hyperparameters([svm_kernel, svm_C, svm_gamma, svm_degree])

    # Random Forest parameters
    rf_n_estimators = Integer("rf_n_estimators", bounds=(10, 200), default=100)
    rf_max_depth = Integer("rf_max_depth", bounds=(2, 20), default=10)
    rf_min_samples_split = Integer("rf_min_samples_split", bounds=(2, 20), default=2)
    rf_min_samples_leaf = Integer("rf_min_samples_leaf", bounds=(1, 20), default=1)
    cs.add_hyperparameters([rf_n_estimators, rf_max_depth, rf_min_samples_split, rf_min_samples_leaf])

    # Add Forbidden Clauses
    # Forbid combinations that are not valid
    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(svm_kernel, "linear")
    )
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenEqualsClause(n_neighbors, 5)
    )
    forbidden_rf = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "random_forest"),
        ForbiddenEqualsClause(svm_kernel, "linear")
    )
    cs.add_forbidden_clause(forbidden_knn)
    cs.add_forbidden_clause(forbidden_svm)
    cs.add_forbidden_clause(forbidden_rf)

    return cs
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:09] [Metadata: {'component': 'config', 'action': 'run'}] from ConfigSpace import ConfigurationSpace, Categorical, Float, Integer, ForbiddenAndConjunction, ForbiddenEqualsClause

def get_configspace():
    cs = ConfigurationSpace(seed=1234)

    # Define hyperparameters
    classifier = Categorical("classifier", ["knn", "svm", "random_forest"], default="knn")
    cs.add_hyperparameter(classifier)

    # KNN parameters
    n_neighbors = Integer("n_neighbors", bounds=(1, 20), default=5)
    weights = Categorical("knn_weights", ["uniform", "distance"], default="uniform")
    cs.add_hyperparameters([n_neighbors, weights])

    # SVM parameters
    svm_kernel = Categorical("svm_kernel", ["linear", "rbf", "poly", "sigmoid"], default="rbf")
    svm_C = Float("svm_C", bounds=(1e-5, 10), default=1.0, log=True)
    svm_gamma = Float("svm_gamma", bounds=(1e-5, 10), default=1.0, log=True)
    svm_degree = Integer("svm_degree", bounds=(2, 5), default=3)
    cs.add_hyperparameters([svm_kernel, svm_C, svm_gamma, svm_degree])

    # Random Forest parameters
    rf_n_estimators = Integer("rf_n_estimators", bounds=(10, 200), default=100)
    rf_max_depth = Integer("rf_max_depth", bounds=(2, 20), default=10)
    rf_min_samples_split = Integer("rf_min_samples_split", bounds=(2, 20), default=2)
    rf_min_samples_leaf = Integer("rf_min_samples_leaf", bounds=(1, 20), default=1)
    cs.add_hyperparameters([rf_n_estimators, rf_max_depth, rf_min_samples_split, rf_min_samples_leaf])

    # Add Forbidden Clauses
    # Forbid combinations that are not valid
    forbidden_knn = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "knn"),
        ForbiddenEqualsClause(svm_kernel, "linear")
    )
    forbidden_svm = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "svm"),
        ForbiddenEqualsClause(n_neighbors, 5)
    )
    forbidden_rf = ForbiddenAndConjunction(
        ForbiddenEqualsClause(classifier, "random_forest"),
        ForbiddenEqualsClause(svm_kernel, "linear")
    )
    cs.add_forbidden_clause(forbidden_knn)
    cs.add_forbidden_clause(forbidden_svm)
    cs.add_forbidden_clause(forbidden_rf)

    return cs

--------------------------------------------------------------------------------
[2025-05-20 12:14:09] [Metadata: {'component': 'config', 'status': 'success'}] Configuration space generated successfully
--------------------------------------------------------------------------------
[2025-05-20 12:14:10] [Metadata: {'component': 'scenario'}] ```python
from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=10,
        n_workers=4
    )
    return scenario
```
--------------------------------------------------------------------------------
[2025-05-20 12:14:10] [Metadata: {'component': 'scenario', 'action': 'run'}] from smac import Scenario
from ConfigSpace import ConfigurationSpace

def generate_scenario(cs):
    scenario = Scenario(
        configspace=cs,
        output_directory="./automl_results",
        deterministic=False,
        min_budget=1,
        max_budget=10,
        n_workers=4
    )
    return scenario

--------------------------------------------------------------------------------
[2025-05-20 12:14:10] [Metadata: {'component': 'scenario', 'status': 'success'}] Scenario generated successfully
--------------------------------------------------------------------------------
