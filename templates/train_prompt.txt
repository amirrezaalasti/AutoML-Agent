**Generate production-grade Python code for a machine learning training function with the following STRICT requirements:**

---

### **Function signature** must be:

```python
def train(cfg: Configuration, seed: int, dataset: Any) -> float:
```

---

### **Function Behavior Requirements:**

* The function **must accept** a `dataset` dictionary with:

  * `dataset['X']`: feature matrix
  * `dataset['y']`: label vector

* Assume `cfg` is a sampled configuration object:

  * Use `cfg.get('key')` to access **primitive values** only (`int`, `float`, `str`, etc.).
  * **Do not** access or manipulate hyperparameter objects directly.

* Use **stratified k-fold cross-validation** via `sklearn.model_selection.cross_val_score`.

  * Set `random_state=seed` to ensure reproducibility.

* You **must train a classification model** that satisfies:

  * Supports **early stopping** if `max_iter` is given.
  * Has `warm_start=True` or similar functionality.
  * Accepts `random_state=seed`.
  * Accepts `learning_rate` (`'constant'` or `'adaptive'`).
  * Accepts `C = 1.0 / alpha` or equivalent regularization strength.
  * If `learning_rate == 'constant'`, use `eta0`; otherwise, ignore `eta0`.

* You **may use any suitable model or framework** (e.g. `scikit-learn`, `TensorFlow`, `PyTorch`) as long as it meets these requirements.

* Return a **loss value**:
  `loss = 1.0 - mean cross-validation accuracy`
  (lower loss = better model)

---

### **Only use the following hyperparameters:**

* `learning_rate`: str (`'constant'` or `'adaptive'`)
* `alpha`: float (log-scaled)
* `max_iter`: int
* `eta0`: float (only used if `learning_rate == 'constant'`)

Use them like this:

```python
value = cfg.get('hyperparameter_name')
```

---

### **Additional Constraints:**

* Include all necessary imports.
* Use full type annotations for all arguments and variables.
* Output **only** the function definition and required imports â€” no extra text or example calls.

---

### **Supporting Code Provided:**

* ConfigSpace definition: `{config_space}`
* SMAC scenario: `{scenario}`
* Dataset description: `{dataset_description}`

